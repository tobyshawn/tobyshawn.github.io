<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/08/26/hello-world/"/>
      <url>/2021/08/26/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CS钓鱼邮件</title>
      <link href="/2021/06/08/CS%E9%92%93%E9%B1%BC%E9%82%AE%E4%BB%B6/"/>
      <url>/2021/06/08/CS%E9%92%93%E9%B1%BC%E9%82%AE%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="CS钓鱼邮件"><a href="#CS钓鱼邮件" class="headerlink" title="CS钓鱼邮件"></a>CS钓鱼邮件</h1><h2 id="添加监听器"><a href="#添加监听器" class="headerlink" title="添加监听器"></a>添加监听器</h2><p>首先在服务端开启cs服务，两个参数分别为服务端地址与密码</p><p>[root@tobyshawn cobaltstrike4.2-crack]# ./teamserver 120.xxx.xxx.xxx 123456</p><p>在客户端开启连接</p><p>tobyshawn @ MacBookPro-M1 in cobaltstrike4.2-crack $ ./cobaltstrike</p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608133051591.png" alt="image-20210608133051591" style="zoom:50%;" /><p>点击添加监听器</p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608133732356.png" alt="image-20210608133732356" style="zoom:50%;" /><p>输入相关信息即可，端口需要开放，可联通，未冲突（注意防火墙，安全组）</p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608133824486.png" alt="image-20210608133824486" style="zoom:50%;" /><h2 id="制作宏病毒"><a href="#制作宏病毒" class="headerlink" title="制作宏病毒"></a>制作宏病毒</h2><p>选择MS模块来制作一个宏病毒</p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608134101074.png" alt="image-20210608134101074" style="zoom:50%;" /><p>选择刚设置的监听器</p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608134126524.png" alt="image-20210608134126524" style="zoom:50%;" /><p>点击copy按钮复制相关代码</p><p>打开Word，在视图界面选择宏，并编辑宏</p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608134332998.png" alt="image-20210608134332998" style="zoom:50%;" /><p>在如图所示位置粘贴代码</p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608134432459.png" alt="image-20210608134432459" style="zoom:50%;" /><p>保存为启用宏的文档docm</p><h2 id="准备钓鱼邮件及网站"><a href="#准备钓鱼邮件及网站" class="headerlink" title="准备钓鱼邮件及网站"></a>准备钓鱼邮件及网站</h2><p>点开一封想要发送的邮件，将其导出为emi格式</p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608135925117.png" alt="image-20210608135925117" style="zoom:50%;" /><p>接下来为了真实性，克隆一个网站</p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608140511454.png" alt="image-20210608140511454" style="zoom:50%;" /><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608160723711.png" alt="image-20210608160723711" style="zoom:50%;" /><p>将钓鱼目标邮件地址记录到一个文件中</p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608140132996.png" alt="image-20210608140132996" style="zoom:50%;" /><p>开始发送钓鱼邮件</p><p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608140541011.png" alt="image-20210608140541011"></p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608140802309.png" alt="image-20210608140802309" style="zoom:50%;" /><p>设置好邮箱服务器</p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608140922215.png" alt="image-20210608140922215" style="zoom:50%;" /><p>该密码非邮箱密码，而是开启stmp服务时的代码</p><p>完成后点击发送邮件</p><p>在cs中会显示发送情况</p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608141026548.png" alt="image-20210608141026548" style="zoom:50%;" /><h2 id="上线"><a href="#上线" class="headerlink" title="上线"></a>上线</h2><p>等待目标打开邮件下载附件，邮件中的超链接已经被替换</p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608142129675.png" alt="image-20210608142129675" style="zoom:50%;" /><p>当目标打开附件时就会上线cs</p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608142242628.png" alt="image-20210608142242628" style="zoom:50%;" /><p>用户在假的页面上输入的信息也会 被记录下来，可以获取到用户输入的手机号，密码等信息</p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608142653000.png" alt="image-20210608142653000" style="zoom:50%;" /><p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608142638996.png" alt="image-20210608142638996"></p><p>也可以进行截图、上传文件等操作</p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608143026920.png" alt="image-20210608143026920" style="zoom:50%;" /><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608144251856.png" alt="image-20210608144251856" style="zoom:50%;" /><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608144307692.png" alt="image-20210608144307692" style="zoom:50%;" />]]></content>
      
      
      
        <tags>
            
            <tag> 红队 </tag>
            
            <tag> cobalt strike </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker初学习</title>
      <link href="/2021/06/06/docker%E5%88%9D%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/06/06/docker%E5%88%9D%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇只是自己学习笔记，宿主机Ubuntu18.04和centos7混用，可能导致部分系统命令有出入，但是docker相关的命令无影响。docker info version logs等命令不再列出。目前为一些基础操作，可能后续还会增加，可能也会鸽了。有错误或者疑问欢迎提出讨论。</p><h1 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h1><h2 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h2><p><a href="https://cr.console.aliyun.com/">https://cr.console.aliyun.com/</a><br>首页点击“创建我的容器镜像” 得到一个专属的镜像加速地址</p><p>Docker中国区官方镜像<br><a href="https://registry.docker-cn.com/">https://registry.docker-cn.com</a></p><p>网易<br><a href="http://hub-mirror.c.163.com/">http://hub-mirror.c.163.com</a></p><pre class=" language-shell"><code class="language-shell">root@ubuntu:/home/shawn# vi /etc/docker/daemon.jsonroot@ubuntu:/home/shawn# cat /etc/docker/daemon.json &#123;        "registry-mirrors": ["https://o1260yxa.mirror.aliyuncs.com"]&#125;root@ubuntu:/home/shawn# service docker restartroot@ubuntu:/home/shawn# docker info... Labels: Experimental: false Insecure Registries:  127.0.0.0/8 Registry Mirrors:  https://o1260yxa.mirror.aliyuncs.com/ Live Restore Enabled: false ...</code></pre><h2 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h2><h3 id="1、docker-hub"><a href="#1、docker-hub" class="headerlink" title="1、docker  hub"></a>1、docker  hub</h3><p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210603104858557.png" alt="image-20210603104858557"></p><h3 id="2、docker-search"><a href="#2、docker-search" class="headerlink" title="2、docker search"></a>2、docker search</h3><p>使用docker search xxx[:tag]命令，也可以带tag搜索</p><pre class=" language-shell"><code class="language-shell">[root@localhost /]# docker search ubuntuNAME                                                      DESCRIPTION                                     STARS     OFFICIAL   AUTOMATEDubuntu                                                    Ubuntu is a Debian-based Linux operating sys…   12321     [OK]       dorowu/ubuntu-desktop-lxde-vnc                            Docker image to provide HTML5 VNC interface …   538                  [OK]websphere-liberty                                         WebSphere Liberty multi-architecture images …   273       [OK]       rastasheep/ubuntu-sshd                                    Dockerized SSH service, built on top of offi…   253                  [OK]consol/ubuntu-xfce-vnc                                    Ubuntu container with "headless" VNC session…   240                  [OK]ubuntu-upstart                                            Upstart is an event-based replacement for th…   110       [OK]       1and1internet/ubuntu-16-nginx-php-phpmyadmin-mysql-5      ubuntu-16-nginx-php-phpmyadmin-mysql-5          50                   [OK]open-liberty                                              Open Liberty multi-architecture images based…   46        [OK]       ubuntu-debootstrap                                        debootstrap --variant=minbase --components=m…   44        [OK]       i386/ubuntu                                               Ubuntu is a Debian-based Linux operating sys…   25                   solita/ubuntu-systemd                                     Ubuntu + systemd                                24                   [OK]1and1internet/ubuntu-16-apache-php-5.6                    ubuntu-16-apache-php-5.6                        14                   [OK]</code></pre><h2 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h2><p>docker pull xxx:tag</p><pre class=" language-shell"><code class="language-shell">[root@localhost /]# docker pull centos:77: Pulling from library/centos2d473b07cdd5: Pull complete Digest: sha256:0f4ec88e21daf75124b8a9e5ca03c37a5e937e0e108a255d890492430789b60eStatus: Downloaded newer image for centos:7docker.io/library/centos:7</code></pre><h2 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h2><p>docker images</p><pre class=" language-shell"><code class="language-shell">[root@localhost /]# docker imagesREPOSITORY                        TAG             IMAGE ID       CREATED          SIZEseacms                            v6.61           17720ee28ffb   39 minutes ago   739MBseacms                            demo            bbc3a9befb03   42 minutes ago   739MBseacms                            v6.1            294c32f9d5b1   18 hours ago     705MBdrupal_7.57                       cve-2018-7602   7b8d148f180b   25 hours ago     405MBdrupal_8.3.0                      cve-2017-6920   5c4fe0f07e90   26 hours ago     691MBwordpress4.7                      cve-2017-5487   f620e62f2ca8   26 hours ago     946MBtobyshawn/ubuntu16_04_lamp        v1              c231de98bb36   2 days ago       602MBvulfocus/seacms-cnvd_2020_22721   latest          f4dccf30c280   10 days ago      585MBubuntu                            16.04           9ff95a467e45   2 weeks ago      135MBsecfa/docker-awvs                 latest          cd2a9f00863a   3 weeks ago      1.06GBcentos                            7               8652b9f0cb4c   6 months ago     204MBdrupal                            7.57            79c9b34e01cf   3 years ago      403MBdrupal                            8.3.0           4e47ab49efee   4 years ago      445MB</code></pre><h2 id="导出镜像"><a href="#导出镜像" class="headerlink" title="导出镜像"></a>导出镜像</h2><pre class=" language-shell"><code class="language-shell">[root@localhost /]# docker save seacms:v6.61 > seacms_v6.61.tar[root@localhost /]# lsseacms_v6.61.tar  </code></pre><h2 id="导入镜像"><a href="#导入镜像" class="headerlink" title="导入镜像"></a>导入镜像</h2><p>docker load &lt; tar包</p><pre class=" language-shell"><code class="language-shell">[root@localhost /]# docker load < dircms_2011-sp3-utf8.tar239bf11460ef: Loading layer [==================================================>]  47.15MB/47.15MBLoaded image: dircms:2011-sp3-utf8[root@localhost /]# docker imagesREPOSITORY                        TAG             IMAGE ID       CREATED        SIZEdircms                            2011-sp3-utf8   8a9c43e51650   18 hours ago   785MB</code></pre><p>使用load导入的镜像不支持改名</p><p>（建议save导出的镜像用load导入，export导出的镜像用import导入，不要混用）</p><h1 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h1><h2 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h2><p>docker run -it 镜像名:tag [command]</p><p>-i：交互式操作</p><p>-t：终端</p><p>-d：后台运行，不进入终端</p><p>-p：指定端口映射，如8080:80的意思是将容器的80端口映射到宿主机上，访问宿主机的8080端口即可访问容器的80端口</p><p>[command]：/bin/bash、/bin/sh，看需求，在进入容器时执行的命令，也可以自己写上指定脚本用于运行</p><pre class=" language-shell"><code class="language-shell">[root@localhost /]# docker run -it -p 8080:80 centos:7[root@87369de718c8 /]# lsanaconda-post.log  bin  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var[root@87369de718c8 /]# pwd/[root@87369de718c8 /]# whoami;idrootuid=0(root) gid=0(root)</code></pre><h2 id="启动、停止、重启容器"><a href="#启动、停止、重启容器" class="headerlink" title="启动、停止、重启容器"></a>启动、停止、重启容器</h2><p>启动已有容器的命令为docker start 容器id</p><pre class=" language-shell"><code class="language-shell">[root@localhost /]# docker start 625dcd1bf772625dcd1bf772</code></pre><h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h2><p>对于后台运行的容器（-d参数创建的容器，或是start已存在的容器），需要进入容器时有两种方法</p><h3 id="1、docker-attach"><a href="#1、docker-attach" class="headerlink" title="1、docker attach"></a>1、docker attach</h3><p>docker attach 容器id   #exit时会停止容器（进⼊⼀个容器正在执⾏的终端）</p><h3 id="2、docker-exec"><a href="#2、docker-exec" class="headerlink" title="2、docker exec"></a>2、docker exec</h3><p>docker exec -it 容器id /bin/bash  #exit时不会停止容器（进⼊容器新开⼀个终端）</p><pre class=" language-shell"><code class="language-shell">[root@localhost /]# docker exec -it 625dcd1bf772 /bin/bashroot@625dcd1bf772:/# </code></pre><h2 id="容器保存成镜像"><a href="#容器保存成镜像" class="headerlink" title="容器保存成镜像"></a>容器保存成镜像</h2><p>docker commit 容器ID 镜像名</p><pre class=" language-shell"><code class="language-shell">[root@localhost /]# docker commit 28a8e3c0c9dd dircms_demosha256:47249d0234ee9b962ff1121589bf5365746b614f51c72f33e78f3a51c48ca704[root@localhost /]# docker imagesREPOSITORY                        TAG             IMAGE ID       CREATED         SIZEdircms_demo                       latest          47249d0234ee   7 seconds ago   783MB</code></pre><h2 id="容器导出为镜像"><a href="#容器导出为镜像" class="headerlink" title="容器导出为镜像"></a>容器导出为镜像</h2><p>docker export 容器id &gt; name.tar</p><pre class=" language-shell"><code class="language-shell">[root@localhost /]# docker export 625dcd1bf772 > name.tar[root@localhost /]# ll总用量 2994444-rw-r--r--.   1 root root 613240832 6月   4 14:50 name.tar</code></pre><h2 id="容器快照文件导入为镜像"><a href="#容器快照文件导入为镜像" class="headerlink" title="容器快照文件导入为镜像"></a>容器快照文件导入为镜像</h2><p>docker import 容器文件 镜像名</p><pre class=" language-shell"><code class="language-shell">[root@localhost /]# docker import name.tar name:testsha256:8feb4db4855da4aa9de16cbd57088d4946b8a2844a91737444ae3fe5ab1990c3[root@localhost /]# docker imagesREPOSITORY                   TAG             IMAGE ID       CREATED             SIZEname                         test            8feb4db4855d   6 seconds ago       602MB</code></pre><p>使用import导入的镜像可以指定镜像名与tag</p><p>（建议save导出的镜像用load导入，export导出的镜像用import导入，不要混用）</p><h2 id="容器改名"><a href="#容器改名" class="headerlink" title="容器改名"></a>容器改名</h2><p>docker rename old_name new_name</p><pre class=" language-shell"><code class="language-shell">[root@localhost /]# docker ps -aCONTAINER ID   IMAGE                           COMMAND                  CREATED             STATUS                         PORTS     NAMES87369de718c8   centos:7                        "/bin/bash"              22 minutes ago      Exited (127) 6 seconds ago               dazzling_ritchie[root@localhost /]# docker rename dazzling_ritchie rubbish[root@localhost /]# docker ps -aCONTAINER ID   IMAGE                           COMMAND                  CREATED             STATUS                         PORTS     NAMES87369de718c8   centos:7                        "/bin/bash"              23 minutes ago      Exited (127) 55 seconds ago              rubbis</code></pre><p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210603113831463.png" alt="image-20210603113831463"></p><h2 id="容器与宿主机文件拷贝"><a href="#容器与宿主机文件拷贝" class="headerlink" title="容器与宿主机文件拷贝"></a>容器与宿主机文件拷贝</h2><p>docker cp 文件 容器名：容器内路径</p><pre class=" language-shell"><code class="language-shell">[root@localhost /]# docker cp dircms_sp3_gbk.zip vigilant_mayer:/var/www/html</code></pre><pre class=" language-shell"><code class="language-shell">root@43dd7ab25a68:/var/www/html# lsroot@43dd7ab25a68:/var/www/html# lsdircms_sp3_gbk.zip</code></pre><h2 id="容器内服务自启"><a href="#容器内服务自启" class="headerlink" title="容器内服务自启"></a>容器内服务自启</h2><p>制作完docker镜像后发现，每次新建容器或者重启容器，服务都不会自动起来，比如我搭建的cms，而apache2服务和mysql每次都是关闭的状态，还需要重新去开启，就很麻烦，因此希望容器内的服务能够随着容器的启动而启动。</p><h3 id="目前情况"><a href="#目前情况" class="headerlink" title="目前情况"></a>目前情况</h3><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost test<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker start f1909ca90a08 </span>f1909ca90a08<span class="token punctuation">[</span>root@localhost test<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker exec -it f1909ca90a08 /bin/bash</span>root@f1909ca90a08:/<span class="token comment" spellcheck="true"># service apache2 status </span> * apache2 is not runningroot@f1909ca90a08:/<span class="token comment" spellcheck="true"># service mysql status </span> * MySQL is stopped.</code></pre><h3 id="操作过程"><a href="#操作过程" class="headerlink" title="操作过程"></a>操作过程</h3><p>在docker容器内写入sh，并赋予执行权限</p><p>命令根据自己的要求更改，最后留着/bin/bash是为了保留终端</p><p>(如果是打包集成环境，不需要终端操作而只是开启后后台运行的话，建议将/bin/bash 改成 tail -f /dev/null，因为)</p><pre class=" language-shell"><code class="language-shell">root@f1909ca90a08:/# vi /etc/apache2/auto_start.shroot@f1909ca90a08:/# cat /etc/apache2/auto_start.sh service apache2 start service mysql start/bin/bashroot@f1909ca90a08:/# chmod 777 /etc/apache2/auto_start.sh</code></pre><p>退出容器，并关闭，保存为镜像</p><pre class=" language-shell"><code class="language-shell">root@f1909ca90a08:/# exitexit[root@localhost test]# docker ps CONTAINER ID   IMAGE         COMMAND       CREATED             STATUS         PORTS                                             NAMESf1909ca90a08   seacms:v6.1   "/bin/bash"   About an hour ago   Up 5 minutes   3306/tcp, 0.0.0.0:8080->80/tcp, :::8080->80/tcp   mystifying_bose[root@localhost test]# docker stop f1909ca90a08f1909ca90a08[root@localhost test]# docker commit f1909ca90a08 seacms:demosha256:bbc3a9befb0323272f2889d6ce9d4cf3a1c20270f3fb765325252ae6fbcc8a88[root@localhost test]# </code></pre><p>在一个*<u><strong>空目录</strong></u>*下，创建Dockerfile</p><p>FROM 指定基础镜像</p><pre class=" language-shell"><code class="language-shell">[root@localhost test]# ls[root@localhost test]# vi Dockerfile[root@localhost test]# cat Dockerfile From seacms:demoCMD ["/bin/sh","/etc/apache2/auto_start.sh"][root@localhost test]# </code></pre><p>通过Dockerfile构建新的镜像</p><p>-t指定最终镜像名，需要跟地址，这里使用的是 “**.**” ，也就是当前目录</p><pre class=" language-shell"><code class="language-shell">[root@localhost test]# docker build -t seacms:v6.61 .Sending build context to Docker daemon  2.048kBStep 1/2 : From seacms:demo ---> bbc3a9befb03Step 2/2 : CMD ["/bin/sh","/etc/apache2/auto_start.sh"] ---> Running in ec97dd1c1b8dRemoving intermediate container ec97dd1c1b8d ---> 17720ee28ffbSuccessfully built 17720ee28ffbSuccessfully tagged seacms:v6.61[root@localhost test]# </code></pre><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>用新的镜像创建容器</p><pre class=" language-shell"><code class="language-shell">[root@localhost test]# docker imagesREPOSITORY                        TAG             IMAGE ID       CREATED              SIZEseacms                            v6.61           17720ee28ffb   About a minute ago   739MBseacms                            demo            bbc3a9befb03   4 minutes ago        739MBseacms                            v6.1            294c32f9d5b1   17 hours ago         705MB[root@localhost test]# docker run -it -p 8080:80 seacms:v6.61 * Starting web server apache2                                                                                                                                                               AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 172.17.0.2. Set the 'ServerName' directive globally to suppress this message *  * Starting MySQL database server mysqld                                                                                                                                              [ OK ]  * Checking for tables which need an upgrade, are corrupt or were not closed cleanly.root@87da08c8d005:/# service apache2 status * apache2 is runningroot@87da08c8d005:/# service mysql status * /usr/bin/mysqladmin  Ver 8.42 Distrib 5.5.60, for debian-linux-gnu on x86_64Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Server version        5.5.60-0ubuntu0.14.04.1Protocol version    10Connection        Localhost via UNIX socketUNIX socket        /var/run/mysqld/mysqld.sockUptime:            17 secThreads: 1  Questions: 212  Slow queries: 0  Opens: 82  Flush tables: 1  Open tables: 75  Queries per second avg: 12.470root@87da08c8d005:/#</code></pre><p>此时服务已经随着容器的启动而启动了</p>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
