<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux基本操作2</title>
      <link href="/2021/08/28/Linux%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C2/"/>
      <url>/2021/08/28/Linux%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C2/</url>
      
        <content type="html"><![CDATA[<h1 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h1><h2 id="网卡配置"><a href="#网卡配置" class="headerlink" title="网卡配置"></a>网卡配置</h2><h3 id="Centos-7"><a href="#Centos-7" class="headerlink" title="Centos 7"></a>Centos 7</h3><p>修改位置</p><pre class=" language-shell"><code class="language-shell">/etc/sysconfig/network-scripts/ifcfg-xxx</code></pre><p>内容解析</p><pre class=" language-shell"><code class="language-shell">TYPE="Ethernet"                        #配置文件接口类型DEVICE="eth0"                            #网络接口名称BOOTPROTO="static"                #系统启动地址协议：static、dhcp、bootp、noneNM_CONTROLLED="no"                #是否由Network Manager控制该网络接口ONBOOT="yes"                           #启动时是否激活UUID=27137241-842e-4e50-88dd-8d8da1305dc0DEFROUTE=yes                          #是否默认路由IPADDR=192.168.1.1                #ip地址NETMASK=255.255.255.0            #子网掩码GATEWAY=192.168.1.254            #网关地址BROADCAST=192.168.1.255        #广播地址HWADDR=00:0C:29:13:5D:74    #MAC地址#MACADDR=                                    #MAC地址，只需要设置一个，不能冲突DNS1=114.114.114.114            #dnsDNS2=8.8.8.8                            #dnsHWADDR=00:90:27:50:5B:30ARPCHECK=no</code></pre><p>配置完成后</p><pre class=" language-shell"><code class="language-shell">service network restart#或systemctl restart network#或reboot</code></pre><h3 id="Ubuntu-18-04之前"><a href="#Ubuntu-18-04之前" class="headerlink" title="Ubuntu 18.04之前"></a>Ubuntu 18.04之前</h3><p>修改位置</p><pre class=" language-shell"><code class="language-shell">/etc/network/interfaces</code></pre><p>内容解析</p><pre class=" language-shell"><code class="language-shell">auto loiface lo inet loopback#static设置auto eth0iface eth0 inet static     address 192.168.1.1                #IP地址     netmask 255.255.255.0            #掩码     broadcast 192.168.1.255        #广播地址     gateway 192.168.1.254            #网关#dhcp设置auto eth1iface eth1 inet dhcp</code></pre><h3 id="Ubuntu-18-04及之后"><a href="#Ubuntu-18-04及之后" class="headerlink" title="Ubuntu 18.04及之后"></a>Ubuntu 18.04及之后</h3><p>修改位置</p><pre class=" language-shell"><code class="language-shell">ls /etc/netplan/vim /etc/netplan/*.yaml</code></pre><p>dhcp</p><pre class=" language-shell"><code class="language-shell">network:  version: 2  renderer: networkd  ethernets:    enp3s0:      dhcp4: true</code></pre><p>static</p><pre class=" language-shell"><code class="language-shell">network:  version: 2  renderer: networkd  ethernets:    enp3s0:      addresses:        - 10.10.10.2/24      gateway4: 10.10.10.1      nameservers:          search: [mydomain, otherdomain]          addresses: [10.10.10.1, 1.1.1.1]</code></pre><p>应用/重启服务</p><pre class=" language-shell"><code class="language-shell">netplan apply#服务器版systemctl restart system-networkd#桌面版systemctl restart network-manager</code></pre><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><h3 id="网卡"><a href="#网卡" class="headerlink" title="网卡"></a>网卡</h3><p>ifconfig 网卡名</p><pre class=" language-shell"><code class="language-shell">root@ubuntu:~/test# ifconfig eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500        inet 10.211.55.4  netmask 255.255.255.0  broadcast 10.211.55.255        inet6 fe80::21c:42ff:feb3:a11c  prefixlen 64  scopeid 0x20<link>        inet6 fdb2:2c26:f4e4:0:21c:42ff:feb3:a11c  prefixlen 64  scopeid 0x0<global>        ether 00:1c:42:b3:a1:1c  txqueuelen 1000  (Ethernet)        RX packets 99713  bytes 119236458 (119.2 MB)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 18746  bytes 1594851 (1.5 MB)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0lo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536        inet 127.0.0.1  netmask 255.0.0.0        inet6 ::1  prefixlen 128  scopeid 0x10<host>        loop  txqueuelen 1000  (Local Loopback)        RX packets 548  bytes 44159 (44.1 KB)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 548  bytes 44159 (44.1 KB)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</code></pre><p>ifconfig 网卡名 up/down</p><pre class=" language-shell"><code class="language-shell">root@ubuntu:~/test# ifconfig eth0 downroot@ubuntu:~/test# ifconfig eth0 up</code></pre><p>ifdown/ifup 网卡名</p><pre class=" language-shell"><code class="language-shell">root@ubuntu:~/test# ifdown eth0root@ubuntu:~/test# ifup eth0</code></pre><p>网络服务</p><pre class=" language-shell"><code class="language-shell">service NetworkManager status #用户桌面式网络管理（shell中强烈建议关闭此服务）service network status #查看服务状态systemctl status networking #查看服务状态status位置还可以使用stop/start/restart，分别是停止、启用、重启</code></pre><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p>route：显示路由表</p><pre class=" language-shell"><code class="language-shell">root@ubuntu:~/test# routeKernel IP routing tableDestination     Gateway         Genmask         Flags Metric Ref    Use Ifacedefault         _gateway        0.0.0.0         UG    100    0        0 eth010.211.55.0     0.0.0.0         255.255.255.0   U     0      0        0 eth0_gateway        0.0.0.0         255.255.255.255 UH    100    0        0 eth0</code></pre><p>netstat 显示网络状态<br>-n或–numeric 直接使用IP地址，而不通过域名服务器<br>-t或–tcp 显示TCP传输协议的连线状况<br>-u或–udp 显示UDP传输协议的连线状况<br>-r 显示路由表，同route命令<br>-l 仅列出在监听状态网络服务<br>-a 列出所有的网络连接</p><pre class=" language-shell"><code class="language-shell">root@ubuntu:~/test# netstat -ntlpActive Internet connections (only servers)Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    tcp        0      0 127.0.0.53:53           0.0.0.0:*               LISTEN      652/systemd-resolve tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      711/sshd: /usr/sbin tcp6       0      0 :::22                   :::*                    LISTEN      711/sshd: /usr/sbin </code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础操作1</title>
      <link href="/2021/08/27/Linux%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C1/"/>
      <url>/2021/08/27/Linux%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C1/</url>
      
        <content type="html"><![CDATA[<h1 id="文件目录操作"><a href="#文件目录操作" class="headerlink" title="文件目录操作"></a>文件目录操作</h1><h3 id="ls：查询目录中内容"><a href="#ls：查询目录中内容" class="headerlink" title="ls：查询目录中内容"></a>ls：查询目录中内容</h3><pre class=" language-shell"><code class="language-shell">root@ubuntu:~# lsjpk  snap  test.sh  xyz.txt#显示所有文件（包含隐藏文件）root@ubuntu:~# ls -a.  ..  .bash_history  .bashrc  .cache  jpk  .profile  snap  .ssh  test.sh  .viminfo  xyz.txt#显示文件或目录的详细信息，文件的属性、大小等root@ubuntu:~# ls -ltotal 16-rw-r--r-- 1 root root    4 Aug 27 09:15 jpkdrwxr-xr-x 3 root root 4096 Jun  7 06:02 snap-rwxr-xr-x 1 root root    4 Aug 27 09:15 test.sh-rw-r--r-- 1 root root    4 Aug 27 09:15 xyz.txt#显示当前目录本身的属性，而不是目录下的文件root@ubuntu:~# ls -d.#显示文件或目录的inoderoot@ubuntu:~# ls -i1573377 jpk  1573351 snap  1573376 test.sh  1573378 xyz.txt</code></pre><h3 id="cd：切换目录"><a href="#cd：切换目录" class="headerlink" title="cd：切换目录"></a>cd：切换目录</h3><h3 id="pwd：查看当前目录"><a href="#pwd：查看当前目录" class="headerlink" title="pwd：查看当前目录"></a>pwd：查看当前目录</h3><pre class=" language-shell"><code class="language-shell">#查看当前目录root@ubuntu:/# pwd/#进入bin目录root@ubuntu:/# cd bin#查看当前目录root@ubuntu:/bin# pwd/bin</code></pre><h3 id="touch、vi、vim：创建文件"><a href="#touch、vi、vim：创建文件" class="headerlink" title="touch、vi、vim：创建文件"></a>touch、vi、vim：创建文件</h3><pre class=" language-shell"><code class="language-shell">#touch#若文件不存在，系统会建立一个新的空白文件。#若文件存在，修改文件或者目录的时间属性，包括存取时间和更改时间。root@ubuntu:~/test# ls123.txtroot@ubuntu:~/test# touch 456.txtroot@ubuntu:~/test# ls123.txt  456.txt</code></pre><pre class=" language-shell"><code class="language-shell">#vi、vim#使用该命令创建文件，必须输入内容保存成功之后，该文件才会生效。root@ubuntu:~/test# vi 789.txtf</code></pre><p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210828091051280.png" alt="image-20210828091051280"></p><p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210828091436596.png" alt="image-20210828091436596"></p><p>按下“Esc”，按下“:”，输入“wq”后保存退出</p><p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210828092029329.png" alt="image-20210828092029329"></p><p>已创建新文件</p><pre class=" language-shell"><code class="language-shell">root@ubuntu:~/test# ls123.txt  456.txt  789.txt</code></pre><h3 id="mkdir：创建目录，-p参数递归创建"><a href="#mkdir：创建目录，-p参数递归创建" class="headerlink" title="mkdir：创建目录，-p参数递归创建"></a>mkdir：创建目录，-p参数递归创建</h3><pre class=" language-shell"><code class="language-shell">#创建新文件夹newroot@ubuntu:~/test# mkdir newroot@ubuntu:~/test# ls123.txt  456.txt  789.txt  new#递归创建root@ubuntu:~/test# mkdir -p new2/2.2/2.3root@ubuntu:~/test# tree.├── 123.txt├── 456.txt├── 789.txt├── new└── new2    └── 2.2        └── 2.34 directories, 3 files</code></pre><h3 id="rmdir：删除空目录"><a href="#rmdir：删除空目录" class="headerlink" title="rmdir：删除空目录"></a>rmdir：删除<strong>空目录</strong></h3><pre class=" language-shell"><code class="language-shell">#删除空目录root@ubuntu:~/test# rmdir new#删除非空目录，报错root@ubuntu:~/test# rmdir new2/rmdir: failed to remove 'new2/': Directory not emptyroot@ubuntu:~/test# ls123.txt  456.txt  789.txt  new2</code></pre><h3 id="rm：删除文件或目录，-r递归删除，-f强制删除"><a href="#rm：删除文件或目录，-r递归删除，-f强制删除" class="headerlink" title="rm：删除文件或目录，-r递归删除，-f强制删除"></a>rm：删除文件或目录，-r递归删除，-f强制删除</h3><pre class=" language-shell"><code class="language-shell">root@ubuntu:~/test# rm new2/rm: cannot remove 'new2/': Is a directory#递归强制删除root@ubuntu:~/test# rm -rf new2/root@ubuntu:~/test# ls123.txt  456.txt  789.txtroot@ubuntu:~/test# </code></pre><h3 id="cp：复制文件或目录，若目标存在则会询问是否覆盖，-p保留原文件属性，-r递归复制，-a-rp"><a href="#cp：复制文件或目录，若目标存在则会询问是否覆盖，-p保留原文件属性，-r递归复制，-a-rp" class="headerlink" title="cp：复制文件或目录，若目标存在则会询问是否覆盖，-p保留原文件属性，-r递归复制，-a=-rp"></a>cp：复制文件或目录，若目标存在则会询问是否覆盖，-p保留原文件属性，-r递归复制，-a=-rp</h3><pre class=" language-shell"><code class="language-shell">root@ubuntu:~/test# cp 789.txt copy.txtroot@ubuntu:~/test# ls123.txt  456.txt  789.txt  copy.txtroot@ubuntu:~/test# cat 789.txt copy.txt 插入一些文字插入一些文字</code></pre><h3 id="mv：移动或改名"><a href="#mv：移动或改名" class="headerlink" title="mv：移动或改名"></a>mv：移动或改名</h3><pre class=" language-shell"><code class="language-shell">#查看test目录，空root@ubuntu:~/test# ls test/#移动123.txt到目录下root@ubuntu:~/test# mv 123.txt test/#改名root@ubuntu:~/test# mv 456.txt abc#检验root@ubuntu:~/test# tree .├── 789.txt├── abc├── copy.txt└── test    └── 123.txt1 directory, 4 files</code></pre><h3 id="file：查看文件类型（有些类型被修改过或不显示后缀名）"><a href="#file：查看文件类型（有些类型被修改过或不显示后缀名）" class="headerlink" title="file：查看文件类型（有些类型被修改过或不显示后缀名）"></a>file：查看文件类型（有些类型被修改过或不显示后缀名）</h3><pre class=" language-shell"><code class="language-shell">root@ubuntu:~/test# file abc abc: ASCII textroot@ubuntu:~/test# file 789.txt 789.txt: UTF-8 Unicode text#修改后缀名root@ubuntu:~/test# mv 789.txt 789.pngroot@ubuntu:~/test# file 789.png 789.png: UTF-8 Unicode text</code></pre><p>dd：复制与分离，按照数据块，if输入文件，of输出文件，bs块大小，count块个数</p><pre class=" language-shell"><code class="language-shell">1681387       0x19A7EB        Zip archive data, at least v2.0 to extract, compressed size: 304, uncompressed size: 1483, name: word/_rels/document.xml.rels1681749       0x19A955        Zip archive data, at least v2.0 to extract, compressed size: 377, uncompressed size: 1482, name: [Content_Types].xml1683872       0x19B1A0        End of Zip archive, footer length: 22root@ubuntu:~/test# dd if=Golang.docx of=123.txt bs=1681749                                            9:52:471+1 records in1+1 records out1683927 bytes transferred in 0.000922 secs (1826455069 bytes/sec)                                                                    </code></pre><h1 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h1><h3 id="locate：在后台数据库中搜索文件，速度快，但是不是实时的"><a href="#locate：在后台数据库中搜索文件，速度快，但是不是实时的" class="headerlink" title="locate：在后台数据库中搜索文件，速度快，但是不是实时的"></a>locate：在后台数据库中搜索文件，速度快，但是不是实时的</h3><pre class=" language-shell"><code class="language-shell">#更新数据库root@ubuntu:~/test# updatedb#查找root@ubuntu:~/test# locate abc /root/test/abc</code></pre><h3 id="whereis：搜索系统命令"><a href="#whereis：搜索系统命令" class="headerlink" title="whereis：搜索系统命令"></a>whereis：搜索系统命令</h3><pre class=" language-shell"><code class="language-shell">root@ubuntu:~/test# whereis pwdpwd: /usr/bin/pwd /usr/share/man/man1/pwd.1.gz</code></pre><h3 id="which：搜索命令，可以通过别名搜到"><a href="#which：搜索命令，可以通过别名搜到" class="headerlink" title="which：搜索命令，可以通过别名搜到"></a>which：搜索命令，可以通过别名搜到</h3><pre class=" language-shell"><code class="language-shell">root@ubuntu:~/test# which ls/usr/bin/ls</code></pre><h3 id="find：指定条件查找文件，find-搜索范围-搜索条件-搜索内容"><a href="#find：指定条件查找文件，find-搜索范围-搜索条件-搜索内容" class="headerlink" title="find：指定条件查找文件，find  [搜索范围] [搜索条件] [搜索内容]"></a>find：指定条件查找文件，find  [搜索范围] [搜索条件] [搜索内容]</h3><pre class=" language-shell"><code class="language-shell">root@ubuntu:~/test# find /root -name test/root/test/root/test/test#–iname 不区分大小写；#–user 按照所有者搜索#–nouser 查找没有所有者的文件#...</code></pre><h3 id="通配符，-、？、"><a href="#通配符，-、？、" class="headerlink" title="通配符，*、？、[]"></a>通配符，*、？、[]</h3><pre class=" language-shell"><code class="language-shell">#?表示匹配任意单个字符root@ubuntu:~/test# find /root -name te?t/root/test/root/test/test#*表示匹配任意字符root@ubuntu:~/test# find /root -name te*/root/test/root/test/test#[]表示匹配其中任意一个字符root@ubuntu:~/test# find /root -name te[asd]t/root/test/root/test/test</code></pre><h3 id="grep：在文件中匹配字符串，-i忽略大小写"><a href="#grep：在文件中匹配字符串，-i忽略大小写" class="headerlink" title="grep：在文件中匹配字符串，-i忽略大小写"></a>grep：在文件中匹配字符串，-i忽略大小写</h3><pre class=" language-shell"><code class="language-shell">root@ubuntu:~/test# grep 998 file.txt 123456789987654321root@ubuntu:~/test# cat file.txt | grep xsw1qazxsw23edcvfr4</code></pre><h1 id="压缩与解压"><a href="#压缩与解压" class="headerlink" title="压缩与解压"></a>压缩与解压</h1><h3 id="zip、unzip：压缩解压-zip格式"><a href="#zip、unzip：压缩解压-zip格式" class="headerlink" title="zip、unzip：压缩解压.zip格式"></a>zip、unzip：压缩解压.zip格式</h3><pre class=" language-shell"><code class="language-shell">#压缩root@ubuntu:~/test# zip 789.zip 789.png   adding: 789.png (stored 0%)root@ubuntu:~/test# ls789.png  789.zip  abc  copy.txt  file.txt  test#解压root@ubuntu:~/test# unzip 789.zip Archive:  789.zipreplace 789.png? [y]es, [n]o, [A]ll, [N]one, [r]ename: y  #覆盖 extracting: 789.png</code></pre><h3 id="gzip、gunzip：压缩解压-gz格式"><a href="#gzip、gunzip：压缩解压-gz格式" class="headerlink" title="gzip、gunzip：压缩解压.gz格式"></a>gzip、gunzip：压缩解压.gz格式</h3><pre class=" language-shell"><code class="language-shell">#压缩文件，原文件不保留root@ubuntu:~/test# gzip 789.png root@ubuntu:~/test# ls789.png.gz  789.zip  abc  copy.txt  file.txt  test#压缩文科，原文件保留root@ubuntu:~/test# gzip -c abc > abc.gz#压缩目录下的文件root@ubuntu:~/test# gzip -r test/root@ubuntu:~/test# ls test/123.txt.gz#解压root@ubuntu:~/test# gzip -d 789.png.gz root@ubuntu:~/test# ls789.png  789.zip  abc  abc.gz  copy.txt  file.txt.gz  test#解压root@ubuntu:~/test# gunzip file.txt.gz root@ubuntu:~/test# ls789.png  789.zip  abc  abc.gz  copy.txt  file.txt  test#gzip只能压缩文件 , 不能压缩目录 ,后缀名为.gz , 而且不保留源文件</code></pre><h3 id="bzip2、bunzip2：压缩与解压缩bz2格式"><a href="#bzip2、bunzip2：压缩与解压缩bz2格式" class="headerlink" title="bzip2、bunzip2：压缩与解压缩bz2格式"></a>bzip2、bunzip2：压缩与解压缩bz2格式</h3><pre class=" language-shell"><code class="language-shell">#压缩，不保留root@ubuntu:~/test# bzip2 789.png root@ubuntu:~/test# ls789.png.bz2  789.zip  abc  abc.gz  copy.txt  file.txt  test#压缩，保留root@ubuntu:~/test# bzip2 -k copy.txt root@ubuntu:~/test# ls789.png.bz2  789.zip  abc  abc.gz  copy.txt  copy.txt.bz2  file.txt  test#解压root@ubuntu:~/test# bzip2 -d copy.txt.bz2 bzip2: Output file copy.txt already exists.#解压root@ubuntu:~/test# bunzip2 copy.txt.bz2 bunzip2: Output file copy.txt already exists.</code></pre><h3 id="tar：tar-cvf-打包文件名-源文件。"><a href="#tar：tar-cvf-打包文件名-源文件。" class="headerlink" title="tar：tar  -cvf  打包文件名  源文件。"></a>tar：tar  -cvf  打包文件名  源文件。</h3><p>-c 打包，-v 显示过程，-f 指定打包后的文件名，-z为.tar.gz格式，-j为.tar.bz2格式，-x  解压缩.tar.gz格式</p><pre class=" language-shell"><code class="language-shell">root@ubuntu:~/test# lsabc#打包root@ubuntu:~/test# tar -zcvf abc.tar.gz abc abc#删除原文件root@ubuntu:~/test# rm abc root@ubuntu:~/test# lsabc.tar.gz#解压root@ubuntu:~/test# tar -zxvf abc.tar.gz abcroot@ubuntu:~/test# lsabc  abc.tar.gz</code></pre><h1 id="文本基本命令"><a href="#文本基本命令" class="headerlink" title="文本基本命令"></a>文本基本命令</h1><h3 id="cat命令用于查看纯文本文件（内容较少的），格式为“cat-选项-文件-”。"><a href="#cat命令用于查看纯文本文件（内容较少的），格式为“cat-选项-文件-”。" class="headerlink" title="cat命令用于查看纯文本文件（内容较少的），格式为“cat [选项] [文件]”。"></a>cat命令用于查看纯文本文件（内容较少的），格式为“cat [选项] [文件]”。</h3><p>选项的值：-n  显示行号</p><pre class=" language-shell"><code class="language-shell">root@ubuntu:/# cat /etc/passwd -n     1    root:x:0:0:root:/root:/bin/bash     2    daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin     3    bin:x:2:2:bin:/bin:/usr/sbin/nologin     4    sys:x:3:3:sys:/dev:/usr/sbin/nologin     5    sync:x:4:65534:sync:/bin:/bin/sync     6    games:x:5:60:games:/usr/games:/usr/sbin/nologin</code></pre><h3 id="more命令用于查看纯文本文件（内容较多的），格式为“more-文件”。"><a href="#more命令用于查看纯文本文件（内容较多的），格式为“more-文件”。" class="headerlink" title="more命令用于查看纯文本文件（内容较多的），格式为“more 文件”。"></a>more命令用于查看纯文本文件（内容较多的），格式为“more 文件”。</h3><p>使用空格键或回车键向下翻页</p><pre class=" language-shell"><code class="language-shell">root@ubuntu:/# more /etc/passwdroot:x:0:0:root:/root:/bin/bashdaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologinbin:x:2:2:bin:/bin:/usr/sbin/nologinsys:x:3:3:sys:/dev:/usr/sbin/nologinsync:x:4:65534:sync:/bin:/bin/syncgames:x:5:60:games:/usr/games:/usr/sbin/nologinman:x:6:12:man:/var/cache/man:/usr/sbin/nologinlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologinmail:x:8:8:mail:/var/mail:/usr/sbin/nologinnews:x:9:9:news:/var/spool/news:/usr/sbin/nologinuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologinproxy:x:13:13:proxy:/bin:/usr/sbin/nologin--More--(29%)</code></pre><h3 id="head命令用于查看纯文本文档的前N行，格式为“head-选项-文件-”。"><a href="#head命令用于查看纯文本文档的前N行，格式为“head-选项-文件-”。" class="headerlink" title="head命令用于查看纯文本文档的前N行，格式为“head [选项] [文件]”。"></a>head命令用于查看纯文本文档的前N行，格式为“head [选项] [文件]”。</h3><p>选项的值：-n  行数   查看前多少行的内容</p><pre class=" language-shell"><code class="language-shell">root@ubuntu:/# head -n 3 /etc/passwdroot:x:0:0:root:/root:/bin/bashdaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologinbin:x:2:2:bin:/bin:/usr/sbin/nologin</code></pre><h3 id="tail命令用于查看纯文本文档的后N行或持续刷新内容，格式为“tail-选项-文件-”"><a href="#tail命令用于查看纯文本文档的后N行或持续刷新内容，格式为“tail-选项-文件-”" class="headerlink" title="tail命令用于查看纯文本文档的后N行或持续刷新内容，格式为“tail [选项] [文件]”"></a>tail命令用于查看纯文本文档的后N行或持续刷新内容，格式为“tail [选项] [文件]”</h3><p>tail命令最强悍的功能是可以持续刷新一个文件的内容，当想要实时查看最新日志文件时，这特别有用，此时的命令格式为“tail -f 文件名”</p><pre class=" language-shell"><code class="language-shell">root@ubuntu:/# tail -f /etc/passwd_apt:x:105:65534::/nonexistent:/usr/sbin/nologintss:x:106:111:TPM software stack,,,:/var/lib/tpm:/bin/falseuuidd:x:107:112::/run/uuidd:/usr/sbin/nologintcpdump:x:108:113::/nonexistent:/usr/sbin/nologinlandscape:x:109:115::/var/lib/landscape:/usr/sbin/nologinpollinate:x:110:1::/var/cache/pollinate:/bin/falsesshd:x:111:65534::/run/sshd:/usr/sbin/nologinsystemd-coredump:x:999:999:systemd Core Dumper:/:/usr/sbin/nologinshawn:x:1000:1000:shawn:/home/shawn:/bin/bashlxd:x:998:100::/var/snap/lxd/common/lxd:/bin/false</code></pre><p>tac：反向查看文件</p><pre class=" language-shell"><code class="language-shell">root@ubuntu:~/test# cat abc123456789root@ubuntu:~/test# tac abc789456123</code></pre><p>管道符：把前一个命令原本要输出到屏幕的标准正常数据当作是后一个命令的标准输入</p><pre class=" language-shell"><code class="language-shell">root@ubuntu:~/test# ifconfig | grep inet        inet 10.211.55.4  netmask 255.255.255.0  broadcast 10.211.55.255        inet6 fe80::21c:42ff:feb3:a11c  prefixlen 64  scopeid 0x20<link>        inet6 fdb2:2c26:f4e4:0:21c:42ff:feb3:a11c  prefixlen 64  scopeid 0x0<global>        inet 127.0.0.1  netmask 255.0.0.0        inet6 ::1  prefixlen 128  scopeid 0x10<host></code></pre><p>vi、vim</p><pre class=" language-shell"><code class="language-shell">#vi、vim#使用该命令创建文件，必须输入内容保存成功之后，该文件才会生效。root@ubuntu:~/test# vi 789.txtf</code></pre><p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210828091051280.png" alt="image-20210828091051280"></p><p>按下“i”进入插入状态</p><p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210828091436596.png" alt="image-20210828091436596"></p><p>按下“Esc”，按下“:”，输入“wq”后保存退出</p><p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210828092029329.png" alt="image-20210828092029329"></p><p>已创建新文件</p><p>除了按“:wq”退出之外</p><pre class=" language-shell"><code class="language-shell">/xxx：向前查找xxx字符？xxx：向后查找xxx字符:w：保存:w!：强制保存:q!：强制退出:wq!：强制保存退出/^xxx：查找xxx开头/xxx$：查找xxx结尾x：删除光标所在位置的字符dd：删除光标所在行ndd：删除当前行（包括此行）后 n 行文本dG：删除光标所在行一直到文件末尾的所有内容D：删除光标位置到行尾的内容yy    复制当前行，numyy 复制num行p、P：修改，删除，或者复制的内容作粘贴（p粘贴在当前行下面，P粘贴在当前行上面）</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux的初认识</title>
      <link href="/2021/08/27/Linux%E5%88%9D%E8%AE%A4%E8%AF%86/"/>
      <url>/2021/08/27/Linux%E5%88%9D%E8%AE%A4%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux发展史"><a href="#Linux发展史" class="headerlink" title="Linux发展史"></a>Linux发展史</h1><p>自行了解</p><h1 id="Linux介绍"><a href="#Linux介绍" class="headerlink" title="Linux介绍"></a>Linux介绍</h1><p>Linux优点</p><ul><li>开放</li><li>可靠</li><li>安全</li><li>稳定</li><li>多平台</li><li>多用户</li></ul><h1 id="Linux组成"><a href="#Linux组成" class="headerlink" title="Linux组成"></a>Linux组成</h1><ul><li>Linux内核<ul><li>内核是操作系统的核心，具有很多最基本功能，它负责管理系统的进程、内存、设备驱动程序、文件和网络系统，决定着系统的性能和稳定性。</li></ul></li><li>Shell<ul><li>Shell是系统的用户界面，提供了用户与内核进行交互操作的一种接口，它接收用户输入的命令并把它送入内核去执行，是一个命令解释器。</li></ul></li><li>文件系统<ul><li>是文件存放在磁盘等存储设备上的组织方法，linux是开放性的，能够支持多种异构的文件系统，如ext2,ext3,fat,vfat(fat32),ISO9660,nfs等。</li></ul></li><li>应用系统<ul><li>标准的linux系统都有一整套成为应用程序的程序集，包括文本编辑器、办公套件、数据库等</li></ul></li></ul><h1 id="Linux目录结构"><a href="#Linux目录结构" class="headerlink" title="Linux目录结构"></a>Linux目录结构</h1><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210827170023890.png" alt="image-20210827170023890" style="zoom:100%;" /><ul><li><p><strong>/bin</strong>：<br>bin 是 Binaries (二进制文件) 的缩写, 这个目录存放着最经常使用的<strong>命令</strong>。</p></li><li><p><strong>/boot：</strong><br>这里存放的是启动 Linux 时使用的一些<strong>核心文件</strong>，包括一些连接文件以及镜像文件。</p></li><li><p><strong>/dev ：</strong><br>dev 是 Device(设备) 的缩写, 该目录下存放的是 Linux 的<strong>外部设备</strong>，在 Linux 中访问设备的方式和访问文件的方式是相同的。</p></li><li><p><strong>/etc：</strong><br>etc 是 Etcetera(等等) 的缩写,这个目录用来存放所有的系统管理所需要的<strong>配置文件</strong>和子目录。</p></li><li><p><strong>/home</strong>：<br><strong>用户</strong>的主目录，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。</p></li><li><p><strong>/lib</strong>：<br>lib 是 Library(库) 的缩写这个目录里存放着系统最基本的<strong>动态连接共享库</strong>，其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要用到这些共享库。</p></li><li><p><strong>/media</strong>：<br>linux 系统<strong>自动识别的设备</strong>，例如U盘、光驱等等，当识别后，Linux 会把识别的设备挂载到这个目录下。</p></li><li><p><strong>/mnt</strong>：<br>系统提供该目录是为了让用户临时<strong>挂载</strong>别的文件系统的，我们可以将光驱挂载在 /mnt/ 上，然后进入该目录就可以查看光驱里的内容了。</p></li><li><p><strong>/opt</strong>：<br>opt 是 optional(可选) 的缩写，这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</p></li><li><p><strong>/proc</strong>：<br>proc 是 Processes(进程) 的缩写，/proc 是一种伪文件系统（也即虚拟文件系统），存储的是当前内核运行状态的一系列特殊文件，这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。<br>这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器：</p><pre><code>echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all</code></pre></li><li><p><strong>/root</strong>：<br>该目录为系统管理员，也称作超级权限者的用户主目录。</p></li><li><p><strong>/sbin</strong>：<br>s 就是 Super User 的意思，是 Superuser Binaries (超级用户的二进制文件) 的缩写，这里存放的是系统管理员使用的系统管理程序。</p></li><li><p><strong>/sys</strong>：</p><p>这是 Linux2.6 内核的一个很大的变化。该目录下安装了 2.6 内核中新出现的一个文件系统 sysfs 。</p><p>sysfs 文件系统集成了下面3种文件系统的信息：针对进程信息的 proc 文件系统、针对设备的 devfs 文件系统以及针对伪终端的 devpts 文件系统。</p><p>该文件系统是内核设备树的一个直观反映。</p><p>当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。</p></li><li><p><strong>/tmp</strong>：<br>tmp 是 temporary(临时) 的缩写这个目录是用来存放一些临时文件的。</p></li><li><p><strong>/usr</strong>：<br> usr 是 unix shared resources(共享资源) 的缩写，这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于 windows 下的 program files 目录。</p></li><li><p><strong>/var</strong>：<br>var 是 variable(变量) 的缩写，这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</p></li><li><p><strong>/run</strong>：<br>是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 /var/run 目录，应该让它指向 run。</p></li><li><p><del><strong>/selinux</strong>：</del><br><del>这个目录是 Redhat/CentOS 所特有的目录，Selinux 是一个安全机制，类似于 windows 的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。</del></p></li><li><p><del><strong>/srv</strong>：</del><br><del>该目录存放一些服务启动之后需要提取的数据。</del></p></li><li><p><del><strong>/lost+found</strong>：</del><br><del>这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</del></p></li></ul><h1 id="基本认识"><a href="#基本认识" class="headerlink" title="基本认识"></a>基本认识</h1><h2 id="shell认识"><a href="#shell认识" class="headerlink" title="shell认识"></a>shell认识</h2><pre class=" language-shell"><code class="language-shell">[root@localhost ~]#</code></pre><ul><li>root：当前用户</li><li>localhost：主机名</li><li>～：目录（～为家目录，/为根目录）</li><li>#：用户表示（#为超级用户，$为普通用户）</li></ul><h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p>命令名称 【选项】【参数】</p><p>如：ls -a /root    (查看/root目录下的文件)</p><p>注意：命令名称、选项、参数之间要用空格隔开，</p><h2 id="基本守则"><a href="#基本守则" class="headerlink" title="基本守则"></a>基本守则</h2><ul><li>Linux系统大小写敏感</li><li>文件名前面带”.”是隐藏文件</li><li>linux系统下的”/”相当于DOS下的”\”</li><li>配置文件#开头代表是注释行，程序不执行该行</li><li>“\”放在命令最后，说明下行的命令接在此行的后面</li><li>转译字符“\”，将特殊字符转换成普通字符（“\”也可以是单或双引号），如：空格、@、$等</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows server 2012 安装IIS</title>
      <link href="/2021/06/11/Windows%20server%202012%20R2%E5%AE%89%E8%A3%85IIS/"/>
      <url>/2021/06/11/Windows%20server%202012%20R2%E5%AE%89%E8%A3%85IIS/</url>
      
        <content type="html"><![CDATA[<p>Windows server 2012 安装IIS</p><p>选择服务器管理——添加角色和功能</p><p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210611130800043.png" alt="image-20210611130800043"></p><p>点击下一步</p><p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210611130832047.png" alt="image-20210611130832047"></p><p>下一步</p><p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210611130930720.png" alt="image-20210611130930720"></p><p>勾选“Web服务器（IIS）”和“应用程序服务”</p><p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210611131026012.png" alt="image-20210611131026012"></p><p>选择“3.5”、“4.5”、“IIS可承载web核心”</p><p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210611131241134.png" alt="image-20210611131241134"></p><p>下一步</p><p>![image-20210611131333225](/Users/tobyshawn/Library/Application Support/typora-user-images/image-20210611131333225.png)</p><p>勾选CGI</p><p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210611131812900.png" alt="image-20210611131812900"></p><p>下一步</p><p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210611131855563.png" alt="image-20210611131855563"></p><p>勾选如图所示</p><p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210611131940473.png" alt="image-20210611131940473"></p><p>点击安装</p><p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210611132037901.png" alt="image-20210611132037901"></p><p>等待安装完成</p><p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210611133105206.png" alt="image-20210611133105206"></p><p>访问服务器地址即可看到IIS的欢迎界面</p><p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210611133330123.png" alt="image-20210611133330123"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CS钓鱼邮件</title>
      <link href="/2021/06/08/CS%E9%92%93%E9%B1%BC%E9%82%AE%E4%BB%B6/"/>
      <url>/2021/06/08/CS%E9%92%93%E9%B1%BC%E9%82%AE%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="CS钓鱼邮件"><a href="#CS钓鱼邮件" class="headerlink" title="CS钓鱼邮件"></a>CS钓鱼邮件</h1><h2 id="添加监听器"><a href="#添加监听器" class="headerlink" title="添加监听器"></a>添加监听器</h2><p>首先在服务端开启cs服务，两个参数分别为服务端地址与密码</p><p>[root@tobyshawn cobaltstrike4.2-crack]# ./teamserver 120.xxx.xxx.xxx 123456</p><p>在客户端开启连接</p><p>tobyshawn @ MacBookPro-M1 in cobaltstrike4.2-crack $ ./cobaltstrike</p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608133051591.png" alt="image-20210608133051591" style="zoom:50%;" /><p>点击添加监听器</p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608133732356.png" alt="image-20210608133732356" style="zoom:50%;" /><p>输入相关信息即可，端口需要开放，可联通，未冲突（注意防火墙，安全组）</p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608133824486.png" alt="image-20210608133824486" style="zoom:50%;" /><h2 id="制作宏病毒"><a href="#制作宏病毒" class="headerlink" title="制作宏病毒"></a>制作宏病毒</h2><p>选择MS模块来制作一个宏病毒</p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608134101074.png" alt="image-20210608134101074" style="zoom:50%;" /><p>选择刚设置的监听器</p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608134126524.png" alt="image-20210608134126524" style="zoom:50%;" /><p>点击copy按钮复制相关代码</p><p>打开Word，在视图界面选择宏，并编辑宏</p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608134332998.png" alt="image-20210608134332998" style="zoom:50%;" /><p>在如图所示位置粘贴代码</p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608134432459.png" alt="image-20210608134432459" style="zoom:50%;" /><p>保存为启用宏的文档docm</p><h2 id="准备钓鱼邮件及网站"><a href="#准备钓鱼邮件及网站" class="headerlink" title="准备钓鱼邮件及网站"></a>准备钓鱼邮件及网站</h2><p>点开一封想要发送的邮件，将其导出为emi格式</p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608135925117.png" alt="image-20210608135925117" style="zoom:50%;" /><p>接下来为了真实性，克隆一个网站</p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608140511454.png" alt="image-20210608140511454" style="zoom:50%;" /><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608160723711.png" alt="image-20210608160723711" style="zoom:50%;" /><p>将钓鱼目标邮件地址记录到一个文件中</p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608140132996.png" alt="image-20210608140132996" style="zoom:50%;" /><p>开始发送钓鱼邮件</p><p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608140541011.png" alt="image-20210608140541011"></p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608140802309.png" alt="image-20210608140802309" style="zoom:50%;" /><p>设置好邮箱服务器</p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608140922215.png" alt="image-20210608140922215" style="zoom:50%;" /><p>该密码非邮箱密码，而是开启stmp服务时的代码</p><p>完成后点击发送邮件</p><p>在cs中会显示发送情况</p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608141026548.png" alt="image-20210608141026548" style="zoom:50%;" /><h2 id="上线"><a href="#上线" class="headerlink" title="上线"></a>上线</h2><p>等待目标打开邮件下载附件，邮件中的超链接已经被替换</p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608142129675.png" alt="image-20210608142129675" style="zoom:50%;" /><p>当目标打开附件时就会上线cs</p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608142242628.png" alt="image-20210608142242628" style="zoom:50%;" /><p>用户在假的页面上输入的信息也会 被记录下来，可以获取到用户输入的手机号，密码等信息</p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608142653000.png" alt="image-20210608142653000" style="zoom:50%;" /><p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608142638996.png" alt="image-20210608142638996"></p><p>也可以进行截图、上传文件等操作</p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608143026920.png" alt="image-20210608143026920" style="zoom:50%;" /><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608144251856.png" alt="image-20210608144251856" style="zoom:50%;" /><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608144307692.png" alt="image-20210608144307692" style="zoom:50%;" />]]></content>
      
      
      
        <tags>
            
            <tag> 红队 </tag>
            
            <tag> cobalt strike </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker初学习</title>
      <link href="/2021/06/06/docker%E5%88%9D%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/06/06/docker%E5%88%9D%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇只是自己学习笔记，宿主机Ubuntu18.04和centos7混用，可能导致部分系统命令有出入，但是docker相关的命令无影响。docker info version logs等命令不再列出。目前为一些基础操作，可能后续还会增加，可能也会鸽了。有错误或者疑问欢迎提出讨论。</p><h1 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h1><h2 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h2><p><a href="https://cr.console.aliyun.com/">https://cr.console.aliyun.com/</a><br>首页点击“创建我的容器镜像” 得到一个专属的镜像加速地址</p><p>Docker中国区官方镜像<br><a href="https://registry.docker-cn.com/">https://registry.docker-cn.com</a></p><p>网易<br><a href="http://hub-mirror.c.163.com/">http://hub-mirror.c.163.com</a></p><pre class=" language-shell"><code class="language-shell">root@ubuntu:/home/shawn# vi /etc/docker/daemon.jsonroot@ubuntu:/home/shawn# cat /etc/docker/daemon.json &#123;        "registry-mirrors": ["https://o1260yxa.mirror.aliyuncs.com"]&#125;root@ubuntu:/home/shawn# service docker restartroot@ubuntu:/home/shawn# docker info... Labels: Experimental: false Insecure Registries:  127.0.0.0/8 Registry Mirrors:  https://o1260yxa.mirror.aliyuncs.com/ Live Restore Enabled: false ...</code></pre><h2 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h2><h3 id="1、docker-hub"><a href="#1、docker-hub" class="headerlink" title="1、docker  hub"></a>1、docker  hub</h3><p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210603104858557.png" alt="image-20210603104858557"></p><h3 id="2、docker-search"><a href="#2、docker-search" class="headerlink" title="2、docker search"></a>2、docker search</h3><p>使用docker search xxx[:tag]命令，也可以带tag搜索</p><pre class=" language-shell"><code class="language-shell">[root@localhost /]# docker search ubuntuNAME                                                      DESCRIPTION                                     STARS     OFFICIAL   AUTOMATEDubuntu                                                    Ubuntu is a Debian-based Linux operating sys…   12321     [OK]       dorowu/ubuntu-desktop-lxde-vnc                            Docker image to provide HTML5 VNC interface …   538                  [OK]websphere-liberty                                         WebSphere Liberty multi-architecture images …   273       [OK]       rastasheep/ubuntu-sshd                                    Dockerized SSH service, built on top of offi…   253                  [OK]consol/ubuntu-xfce-vnc                                    Ubuntu container with "headless" VNC session…   240                  [OK]ubuntu-upstart                                            Upstart is an event-based replacement for th…   110       [OK]       1and1internet/ubuntu-16-nginx-php-phpmyadmin-mysql-5      ubuntu-16-nginx-php-phpmyadmin-mysql-5          50                   [OK]open-liberty                                              Open Liberty multi-architecture images based…   46        [OK]       ubuntu-debootstrap                                        debootstrap --variant=minbase --components=m…   44        [OK]       i386/ubuntu                                               Ubuntu is a Debian-based Linux operating sys…   25                   solita/ubuntu-systemd                                     Ubuntu + systemd                                24                   [OK]1and1internet/ubuntu-16-apache-php-5.6                    ubuntu-16-apache-php-5.6                        14                   [OK]</code></pre><h2 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h2><p>docker pull xxx:tag</p><pre class=" language-shell"><code class="language-shell">[root@localhost /]# docker pull centos:77: Pulling from library/centos2d473b07cdd5: Pull complete Digest: sha256:0f4ec88e21daf75124b8a9e5ca03c37a5e937e0e108a255d890492430789b60eStatus: Downloaded newer image for centos:7docker.io/library/centos:7</code></pre><h2 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h2><p>docker images</p><pre class=" language-shell"><code class="language-shell">[root@localhost /]# docker imagesREPOSITORY                        TAG             IMAGE ID       CREATED          SIZEseacms                            v6.61           17720ee28ffb   39 minutes ago   739MBseacms                            demo            bbc3a9befb03   42 minutes ago   739MBseacms                            v6.1            294c32f9d5b1   18 hours ago     705MBdrupal_7.57                       cve-2018-7602   7b8d148f180b   25 hours ago     405MBdrupal_8.3.0                      cve-2017-6920   5c4fe0f07e90   26 hours ago     691MBwordpress4.7                      cve-2017-5487   f620e62f2ca8   26 hours ago     946MBtobyshawn/ubuntu16_04_lamp        v1              c231de98bb36   2 days ago       602MBvulfocus/seacms-cnvd_2020_22721   latest          f4dccf30c280   10 days ago      585MBubuntu                            16.04           9ff95a467e45   2 weeks ago      135MBsecfa/docker-awvs                 latest          cd2a9f00863a   3 weeks ago      1.06GBcentos                            7               8652b9f0cb4c   6 months ago     204MBdrupal                            7.57            79c9b34e01cf   3 years ago      403MBdrupal                            8.3.0           4e47ab49efee   4 years ago      445MB</code></pre><h2 id="导出镜像"><a href="#导出镜像" class="headerlink" title="导出镜像"></a>导出镜像</h2><pre class=" language-shell"><code class="language-shell">[root@localhost /]# docker save seacms:v6.61 > seacms_v6.61.tar[root@localhost /]# lsseacms_v6.61.tar  </code></pre><h2 id="导入镜像"><a href="#导入镜像" class="headerlink" title="导入镜像"></a>导入镜像</h2><p>docker load &lt; tar包</p><pre class=" language-shell"><code class="language-shell">[root@localhost /]# docker load < dircms_2011-sp3-utf8.tar239bf11460ef: Loading layer [==================================================>]  47.15MB/47.15MBLoaded image: dircms:2011-sp3-utf8[root@localhost /]# docker imagesREPOSITORY                        TAG             IMAGE ID       CREATED        SIZEdircms                            2011-sp3-utf8   8a9c43e51650   18 hours ago   785MB</code></pre><p>使用load导入的镜像不支持改名</p><p>（建议save导出的镜像用load导入，export导出的镜像用import导入，不要混用）</p><h1 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h1><h2 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h2><p>docker run -it 镜像名:tag [command]</p><p>-i：交互式操作</p><p>-t：终端</p><p>-d：后台运行，不进入终端</p><p>-p：指定端口映射，如8080:80的意思是将容器的80端口映射到宿主机上，访问宿主机的8080端口即可访问容器的80端口</p><p>[command]：/bin/bash、/bin/sh，看需求，在进入容器时执行的命令，也可以自己写上指定脚本用于运行</p><pre class=" language-shell"><code class="language-shell">[root@localhost /]# docker run -it -p 8080:80 centos:7[root@87369de718c8 /]# lsanaconda-post.log  bin  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var[root@87369de718c8 /]# pwd/[root@87369de718c8 /]# whoami;idrootuid=0(root) gid=0(root)</code></pre><h2 id="启动、停止、重启容器"><a href="#启动、停止、重启容器" class="headerlink" title="启动、停止、重启容器"></a>启动、停止、重启容器</h2><p>启动已有容器的命令为docker start 容器id</p><pre class=" language-shell"><code class="language-shell">[root@localhost /]# docker start 625dcd1bf772625dcd1bf772</code></pre><h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h2><p>对于后台运行的容器（-d参数创建的容器，或是start已存在的容器），需要进入容器时有两种方法</p><h3 id="1、docker-attach"><a href="#1、docker-attach" class="headerlink" title="1、docker attach"></a>1、docker attach</h3><p>docker attach 容器id   #exit时会停止容器（进⼊⼀个容器正在执⾏的终端）</p><h3 id="2、docker-exec"><a href="#2、docker-exec" class="headerlink" title="2、docker exec"></a>2、docker exec</h3><p>docker exec -it 容器id /bin/bash  #exit时不会停止容器（进⼊容器新开⼀个终端）</p><pre class=" language-shell"><code class="language-shell">[root@localhost /]# docker exec -it 625dcd1bf772 /bin/bashroot@625dcd1bf772:/# </code></pre><h2 id="容器保存成镜像"><a href="#容器保存成镜像" class="headerlink" title="容器保存成镜像"></a>容器保存成镜像</h2><p>docker commit 容器ID 镜像名</p><pre class=" language-shell"><code class="language-shell">[root@localhost /]# docker commit 28a8e3c0c9dd dircms_demosha256:47249d0234ee9b962ff1121589bf5365746b614f51c72f33e78f3a51c48ca704[root@localhost /]# docker imagesREPOSITORY                        TAG             IMAGE ID       CREATED         SIZEdircms_demo                       latest          47249d0234ee   7 seconds ago   783MB</code></pre><h2 id="容器导出为镜像"><a href="#容器导出为镜像" class="headerlink" title="容器导出为镜像"></a>容器导出为镜像</h2><p>docker export 容器id &gt; name.tar</p><pre class=" language-shell"><code class="language-shell">[root@localhost /]# docker export 625dcd1bf772 > name.tar[root@localhost /]# ll总用量 2994444-rw-r--r--.   1 root root 613240832 6月   4 14:50 name.tar</code></pre><h2 id="容器快照文件导入为镜像"><a href="#容器快照文件导入为镜像" class="headerlink" title="容器快照文件导入为镜像"></a>容器快照文件导入为镜像</h2><p>docker import 容器文件 镜像名</p><pre class=" language-shell"><code class="language-shell">[root@localhost /]# docker import name.tar name:testsha256:8feb4db4855da4aa9de16cbd57088d4946b8a2844a91737444ae3fe5ab1990c3[root@localhost /]# docker imagesREPOSITORY                   TAG             IMAGE ID       CREATED             SIZEname                         test            8feb4db4855d   6 seconds ago       602MB</code></pre><p>使用import导入的镜像可以指定镜像名与tag</p><p>（建议save导出的镜像用load导入，export导出的镜像用import导入，不要混用）</p><h2 id="容器改名"><a href="#容器改名" class="headerlink" title="容器改名"></a>容器改名</h2><p>docker rename old_name new_name</p><pre class=" language-shell"><code class="language-shell">[root@localhost /]# docker ps -aCONTAINER ID   IMAGE                           COMMAND                  CREATED             STATUS                         PORTS     NAMES87369de718c8   centos:7                        "/bin/bash"              22 minutes ago      Exited (127) 6 seconds ago               dazzling_ritchie[root@localhost /]# docker rename dazzling_ritchie rubbish[root@localhost /]# docker ps -aCONTAINER ID   IMAGE                           COMMAND                  CREATED             STATUS                         PORTS     NAMES87369de718c8   centos:7                        "/bin/bash"              23 minutes ago      Exited (127) 55 seconds ago              rubbis</code></pre><p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210603113831463.png" alt="image-20210603113831463"></p><h2 id="容器与宿主机文件拷贝"><a href="#容器与宿主机文件拷贝" class="headerlink" title="容器与宿主机文件拷贝"></a>容器与宿主机文件拷贝</h2><p>docker cp 文件 容器名：容器内路径</p><pre class=" language-shell"><code class="language-shell">[root@localhost /]# docker cp dircms_sp3_gbk.zip vigilant_mayer:/var/www/html</code></pre><pre class=" language-shell"><code class="language-shell">root@43dd7ab25a68:/var/www/html# lsroot@43dd7ab25a68:/var/www/html# lsdircms_sp3_gbk.zip</code></pre><h2 id="容器内服务自启"><a href="#容器内服务自启" class="headerlink" title="容器内服务自启"></a>容器内服务自启</h2><p>制作完docker镜像后发现，每次新建容器或者重启容器，服务都不会自动起来，比如我搭建的cms，而apache2服务和mysql每次都是关闭的状态，还需要重新去开启，就很麻烦，因此希望容器内的服务能够随着容器的启动而启动。</p><h3 id="目前情况"><a href="#目前情况" class="headerlink" title="目前情况"></a>目前情况</h3><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost test<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker start f1909ca90a08 </span>f1909ca90a08<span class="token punctuation">[</span>root@localhost test<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker exec -it f1909ca90a08 /bin/bash</span>root@f1909ca90a08:/<span class="token comment" spellcheck="true"># service apache2 status </span> * apache2 is not runningroot@f1909ca90a08:/<span class="token comment" spellcheck="true"># service mysql status </span> * MySQL is stopped.</code></pre><h3 id="操作过程"><a href="#操作过程" class="headerlink" title="操作过程"></a>操作过程</h3><p>在docker容器内写入sh，并赋予执行权限</p><p>命令根据自己的要求更改，最后留着/bin/bash是为了保留终端</p><p>(如果是打包集成环境，不需要终端操作而只是开启后后台运行的话，建议将/bin/bash 改成 tail -f /dev/null，因为)</p><pre class=" language-shell"><code class="language-shell">root@f1909ca90a08:/# vi /etc/apache2/auto_start.shroot@f1909ca90a08:/# cat /etc/apache2/auto_start.sh service apache2 start service mysql start/bin/bashroot@f1909ca90a08:/# chmod 777 /etc/apache2/auto_start.sh</code></pre><p>退出容器，并关闭，保存为镜像</p><pre class=" language-shell"><code class="language-shell">root@f1909ca90a08:/# exitexit[root@localhost test]# docker ps CONTAINER ID   IMAGE         COMMAND       CREATED             STATUS         PORTS                                             NAMESf1909ca90a08   seacms:v6.1   "/bin/bash"   About an hour ago   Up 5 minutes   3306/tcp, 0.0.0.0:8080->80/tcp, :::8080->80/tcp   mystifying_bose[root@localhost test]# docker stop f1909ca90a08f1909ca90a08[root@localhost test]# docker commit f1909ca90a08 seacms:demosha256:bbc3a9befb0323272f2889d6ce9d4cf3a1c20270f3fb765325252ae6fbcc8a88[root@localhost test]# </code></pre><p>在一个*<u><strong>空目录</strong></u>*下，创建Dockerfile</p><p>FROM 指定基础镜像</p><pre class=" language-shell"><code class="language-shell">[root@localhost test]# ls[root@localhost test]# vi Dockerfile[root@localhost test]# cat Dockerfile From seacms:demoCMD ["/bin/sh","/etc/apache2/auto_start.sh"][root@localhost test]# </code></pre><p>通过Dockerfile构建新的镜像</p><p>-t指定最终镜像名，需要跟地址，这里使用的是 “**.**” ，也就是当前目录</p><pre class=" language-shell"><code class="language-shell">[root@localhost test]# docker build -t seacms:v6.61 .Sending build context to Docker daemon  2.048kBStep 1/2 : From seacms:demo ---> bbc3a9befb03Step 2/2 : CMD ["/bin/sh","/etc/apache2/auto_start.sh"] ---> Running in ec97dd1c1b8dRemoving intermediate container ec97dd1c1b8d ---> 17720ee28ffbSuccessfully built 17720ee28ffbSuccessfully tagged seacms:v6.61[root@localhost test]# </code></pre><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>用新的镜像创建容器</p><pre class=" language-shell"><code class="language-shell">[root@localhost test]# docker imagesREPOSITORY                        TAG             IMAGE ID       CREATED              SIZEseacms                            v6.61           17720ee28ffb   About a minute ago   739MBseacms                            demo            bbc3a9befb03   4 minutes ago        739MBseacms                            v6.1            294c32f9d5b1   17 hours ago         705MB[root@localhost test]# docker run -it -p 8080:80 seacms:v6.61 * Starting web server apache2                                                                                                                                                               AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 172.17.0.2. Set the 'ServerName' directive globally to suppress this message *  * Starting MySQL database server mysqld                                                                                                                                              [ OK ]  * Checking for tables which need an upgrade, are corrupt or were not closed cleanly.root@87da08c8d005:/# service apache2 status * apache2 is runningroot@87da08c8d005:/# service mysql status * /usr/bin/mysqladmin  Ver 8.42 Distrib 5.5.60, for debian-linux-gnu on x86_64Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Server version        5.5.60-0ubuntu0.14.04.1Protocol version    10Connection        Localhost via UNIX socketUNIX socket        /var/run/mysqld/mysqld.sockUptime:            17 secThreads: 1  Questions: 212  Slow queries: 0  Opens: 82  Flush tables: 1  Open tables: 75  Queries per second avg: 12.470root@87da08c8d005:/#</code></pre><p>此时服务已经随着容器的启动而启动了</p>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
