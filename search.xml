<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>正则初学习</title>
      <link href="/2021/08/31/%E6%AD%A3%E5%88%99/"/>
      <url>/2021/08/31/%E6%AD%A3%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h1 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h1><p>正则表达式(regular expression)描述了一种字符串匹配的模式（pattern），可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等。</p><p>构造正则表达式的方法和创建数学表达式的方法一样。也就是用多种元字符与运算符可以将小的表达式结合在一起来创建更大的表达式。正则表达式的组件可以是单个的字符、字符集合、字符范围、字符间的选择或者所有这些组件的任意组合。</p><p>正则表达式是由普通字符（例如字符 a 到 z）以及特殊字符（称为”元字符”）组成的文字模式。模式描述在搜索文本时要匹配的一个或多个字符串。正则表达式作为一个模板，将某个字符模式与所搜索的字符串进行匹配。</p><h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><h2 id="普通字符"><a href="#普通字符" class="headerlink" title="普通字符"></a>普通字符</h2><p>[…]：匹配中括号其中的所有字符</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/8359515/1627522016780-b14d5e7b-79f8-409c-a413-bb8d192ca220.png" alt="img"></p><p>[^…]：匹配除中括号中的所有字符</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/8359515/1627522067978-18d492e5-4944-4a5d-9924-a23608e9efc1.png" alt="img"></p><p>[A-Z]：匹配区间范围内的所有字符</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/8359515/1627522128767-0d5fd8e4-dda1-4ba0-b9a4-84ff5ab502c2.png" alt="img"></p><p>.  ：匹配除换行符（\r,\n）之外的任何单个字符</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/8359515/1627522325660-aab05ce0-323e-42a6-9a27-2221b3dde98b.png" alt="img"></p><p>[\s\S]：匹配所有字符。\s是匹配所有空白，包括换行，\S是匹配所有非空白，除换行</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/8359515/1627522664091-5a3029f1-10b5-4368-b5dc-388264eed8f5.png" alt="img"></p><p>\w：匹配字母、数字、下划线</p><h2 id="非打印字符"><a href="#非打印字符" class="headerlink" title="非打印字符"></a>非打印字符</h2><p>\f：匹配换页符</p><p>\n：匹配换行符</p><p>\r：匹配回车符</p><p>\t：匹配制表符</p><p>\v：匹配垂直制表符</p><p>\s：匹配空白字符，包括空格、换页、换行、制表，等价于[\f\n\r\t\v]</p><p>\S：匹配非空白字符，等价于[^\f\n\r\t\v]</p><h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><p>()：括起的内容作为子表达式，必须连在一起匹配</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/8359515/1627523940268-a1e38616-dda3-41dd-9ba9-d23fd4ebedfe.png" alt="img"></p><table><thead><tr><th>(ap)</th></tr></thead><tbody><tr><td>Dbapp AhDs TobyShawn shape</td></tr></tbody></table><p>[]：表示表达式的开始与结束，只出现一次</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/8359515/1627524200460-4b2fda93-2303-4f84-94be-7163d786fffe.png" alt="img"></p><table><thead><tr><th>[0-9]h</th></tr></thead><tbody><tr><td>Dbapp AhDs TobyS32131h2hhawn shape\n\r32789h131c</td></tr></tbody></table><p>{}：一般用来匹配长度，详细见限定符解释</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/8359515/1627524482198-99423d60-3003-4ce7-8e31-ac8dbc862e3a.png" alt="img"></p><table><thead><tr><th>([0-9]h){2}</th></tr></thead><tbody><tr><td>Dbapp AhDs TobyS32131h2hhawn shape\n\r32789h131c</td></tr></tbody></table><p>+：匹配+前的字符串一次或多次</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/8359515/1627524928732-41208416-806d-4b57-b8ce-6c1310c50f52.png" alt="img"></p><table><thead><tr><th>Dba[p]+</th></tr></thead><tbody><tr><td>Dbapp Dbap Dba</td></tr></tbody></table><p><em>：匹配</em>前的字符串零次或多次</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/8359515/1627525008832-73963cc1-5a3a-4af1-b2bb-57903e121066.png" alt="img"></p><table><thead><tr><th>Dba[p]*</th></tr></thead><tbody><tr><td>Dbapp Dbap Dba Db</td></tr></tbody></table><p>?：匹配?前的字符串零次或一次</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/8359515/1627525135613-d461d17d-b00b-4151-afed-aeffb1890507.png" alt="img"></p><table><thead><tr><th>Dba[p]?</th></tr></thead><tbody><tr><td>Dbappp Dbapp DbapDba</td></tr></tbody></table><p>^：表示开始，如果在中括号中使用表示非</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/8359515/1627525337631-1e1b4c8b-486a-4200-83f6-bf9e3a426a1e.png" alt="img"></p><table><thead><tr><th>^Dba</th></tr></thead><tbody><tr><td>Dbappp Dbapp Dbap Dba</td></tr></tbody></table><p>$：表示结束</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/8359515/1627525385436-340c830a-e179-4a27-a7e8-46966c49e998.png" alt="img"></p><table><thead><tr><th>Dba$</th></tr></thead><tbody><tr><td>Dbappp Dbapp Dbap Dba</td></tr></tbody></table><p>\：转译，匹配特殊字符本身</p><p>|：表示或，任意匹配其中一个</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/8359515/1627525606507-ec92b2e7-2381-4362-bdf9-8946ad5b2ae3.png" alt="img"></p><table><thead><tr><th>+|*|\</th></tr></thead><tbody><tr><td>+ \ *</td></tr></tbody></table><p>.  ：匹配除换行符（\r,\n）之外的任何单个字符</p><p>注：前文已做过解释</p><h2 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h2><p>*、+、？前文已做过解释</p><p>{n}：匹配确定的长度</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/8359515/1627525937419-be1141b5-2c8b-47c3-b983-bc995c702931.png" alt="img"></p><table><thead><tr><th>o{2}</th></tr></thead><tbody><tr><td>Tooobyshawn</td></tr></tbody></table><p>{n,}：匹配至少n个</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/8359515/1627525982411-72c45b74-ffe9-439f-8e4a-2c5c22994ea9.png" alt="img"></p><table><thead><tr><th>o{2,}</th></tr></thead><tbody><tr><td>Tooobyshawn</td></tr></tbody></table><p>{n,m}：最少匹配n次，最多匹配m次</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/8359515/1627526066817-0bd5982e-a6a7-4803-b118-314d411078bc.png" alt="img"></p><table><thead><tr><th>o{3,4}</th></tr></thead><tbody><tr><td>Toooooobyshawn</td></tr></tbody></table><p>***** <strong>和</strong> <strong>+</strong> <strong>限定符都是贪婪的，因为它们会尽可能多的匹配文字，只有在它们的后面加上一个 ? 就可以实现非贪婪或最小匹配。</strong></p><p>\b：匹配空格与单词的位置</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/8359515/1627526428797-95d72955-b67c-4998-8732-863ddf370293.png" alt="img"></p><table><thead><tr><th>\bsha</th></tr></thead><tbody><tr><td>Tobyshawn shawn</td></tr></tbody></table><p>\B：匹配非边界</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/8359515/1627526480326-71adc479-6a65-4cb0-acbc-03dda02f5453.png" alt="img"></p><table><thead><tr><th>\Bsha</th></tr></thead><tbody><tr><td>Tobyshawn shawn</td></tr></tbody></table><h2 id="零宽断言"><a href="#零宽断言" class="headerlink" title="零宽断言"></a>零宽断言</h2><p>?=：<strong>xxx(?=exp)<strong>：</strong>后面匹配到exp，</strong>才去匹配xxx。</p><p><strong>零宽度正预测先行断言</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/8359515/1627527025498-ce810ff5-6799-45f1-a021-5e61e22e7343.png" alt="img"></p><table><thead><tr><th>Toby(?=[\w])</th></tr></thead><tbody><tr><td>Tobyshawn shawnToby</td></tr></tbody></table><p>?&lt;=：**(?&lt;=exp)xxx<strong>：</strong>前面匹配到 exp**，才去匹配xxx。</p><p><strong>零宽度正回顾后发断言</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/8359515/1627527133581-f74c89fb-9714-49b4-bcdd-b50bd7616b0a.png" alt="img"></p><table><thead><tr><th>(?&lt;=[\w])Toby</th></tr></thead><tbody><tr><td>Tobyshawn shawnToby</td></tr></tbody></table><p>?!：<strong>xxx(?!exp)<strong>：</strong>后面匹配不到exp</strong>，才去匹配xxx。</p><p><strong>零宽度负预测先行断言</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/8359515/1627527197182-9e0bb59a-e637-4a9f-a2a7-b8815ec867a1.png" alt="img"></p><table><thead><tr><th>Toby(?![\w])</th></tr></thead><tbody><tr><td>Tobyshawn shawnToby</td></tr></tbody></table><p>?&lt;!：**(?&lt;!exp)xxx<strong>：</strong>前面匹配不到exp**，才去匹配xxx。</p><p><strong>零宽度负回顾后发断言</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/8359515/1627527271185-cf4bd0c9-8a0f-448a-b594-11d918e18b18.png" alt="img"></p><table><thead><tr><th>(?&lt;![\w])Toby</th></tr></thead><tbody><tr><td>Tobyshawn shawnToby</td></tr></tbody></table><h1 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h1><p>i：ignore，忽略大小写</p><p>g：global，全局匹配</p><p>m：多行匹配</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/8359515/1627527890797-36a37eeb-7bd5-4abd-84fb-3cf25044fdf3.png" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/8359515/1627528155156-fc2b2c19-bba4-431a-8129-24454e2f6e04.png" alt="img"></p><h1 id="常用正则整理"><a href="#常用正则整理" class="headerlink" title="常用正则整理"></a>常用正则整理</h1><h2 id="邮箱："><a href="#邮箱：" class="headerlink" title="邮箱："></a>邮箱：</h2><pre><code>\b[\w.%+-]+@[\w.-]+\.[a-zA-Z]&#123;2,6&#125;\b</code></pre><h2 id="URL："><a href="#URL：" class="headerlink" title="URL："></a>URL：</h2><pre><code>^(?=^.&#123;3,255&#125;$)(http(s)?:\/\/)?(www\.)?[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(\.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+(:\d+)*(\/\w+\.\w+)*([\?&amp;]\w+=\w*)*$</code></pre><h2 id="手机号："><a href="#手机号：" class="headerlink" title="手机号："></a>手机号：</h2><h2 id="身份证："><a href="#身份证：" class="headerlink" title="身份证："></a>身份证：</h2><p>15：</p><p>18：</p><h3 id="IP地址："><a href="#IP地址：" class="headerlink" title="IP地址："></a>IP地址：</h3><p>IPv4：</p><pre><code>^(\d&#123;1,2&#125;|1\d\d|2[0-4]\d|25[0-5])\.(\d&#123;1,2&#125;|1\d\d|2[0-4]\d|25[0-5])\.(\d&#123;1,2&#125;|1\d\d|2[0-4]\d|25[0-5])\.(\d&#123;1,2&#125;|1\d\d|2[0-4]\d|25[0-5])$</code></pre><p>IPv6：</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Shell基础</title>
      <link href="/2021/08/30/Shell%E5%91%BD%E4%BB%A4/"/>
      <url>/2021/08/30/Shell%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="Shell基本概述"><a href="#Shell基本概述" class="headerlink" title="Shell基本概述"></a>Shell基本概述</h2><h3 id="shell的概念"><a href="#shell的概念" class="headerlink" title="shell的概念"></a>shell的概念</h3><p>shell的原意指的是壳，正如它的本义一样，它将计算的内核进行包裹，而用户通过它这层外壳来访问计算的各种软硬件资源。通常，shell是用C语言编写的应用程序。既然是应用程序，就需要加载执行，而shell作为一类特殊的应用程序，是由系统在启动时自动加载的。</p><p>shell是一个<strong>应用程序</strong>，它连接了用户和linux内核，让用户能够更高效、安全、低成本的使用linux内核，这个就是shell的本质</p><p>一般放在/bin或者/usr/bin目录下，当前 Linux 系统可用的 Shell 都记录在/etc/shells文件中</p><p>可以使用echo $SHELL查看当前shell</p><pre class=" language-shell"><code class="language-shell">tobyshawn @ MacBookPro-M1 in ~ $ cat /etc/shells                                        exit 1 18:58:10/bin/bash/bin/csh/bin/dash/bin/ksh/bin/sh/bin/tcsh/bin/zsh/usr/local/bin/pwsh</code></pre><pre class=" language-shell"><code class="language-shell">root@8c300f41b9f9:/# cat /etc/passwdroot:x:0:0:root:/root:/bin/bashdaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologinsync:x:4:65534:sync:/bin:/bin/syncmysql:x:101:102:MySQL Server,,,:/nonexistent:/bin/falseguest1:x:1000:1000::/home/guest1:/bin/shguest2:x:1001:1001::/home/guest2:/bin/sh</code></pre><p>注册名：密码：UID：GID：用户名：主目录：shell</p><p>所有的伪用户，也是系统用户，它的shell是/bin/nologin，绝大多数不是用来执行命令的用户，就写的是/sbin/nologin 代表整个用户不允许登录</p><h3 id="shell的分类"><a href="#shell的分类" class="headerlink" title="shell的分类"></a>shell的分类</h3><p>Linux 中的 shell 有多种类型，其中最常用的几种是 bourne shell(sh)、c shell(csh)、korn shell(ksh)。</p><p>sh 是 Unix 最初使用的 shell，并且在每种 Unix 上都可以使用。sh 在 shell 编程方面相当优秀，但在处理与用户的交互方面做得不如 csh 和 ksh。</p><ul><li><strong>bash</strong></li></ul><p>bourne again shell，大多数 Linux 系统默认使用的 shell，bash shell 是 Bourne shell 的一个免费版本，它是最早的 Unix shell，bash 还有一个特点，可以通过 help 命令来查看帮助。包含的功能几乎可以涵盖 shell 所具有的功能，所以一般的 shell 脚本都会指定它为执行路径。</p><p>可以提供如<strong>命令补全</strong>、<strong>命令编辑</strong>和<strong>命令历史</strong>表等功能它还包含了很多 csh 和 ksh 中的优点，有灵活和强大的编程接口，同时又有友好的用户界面。</p><ul><li><strong>csh</strong></li></ul><p>C shell 使用的是 “类C” 语法，csh 是具有<strong>C语言</strong>风格的一种 shell，其内部命令有 52 个，较为庞大。目前使用的并不多，已经被 /bin/tcsh 所取代。</p><ul><li><strong>ksh</strong></li></ul><p>Korn shell 的语法与 Bourne shell 相同，同时具备了 C shell 的易用特点。许多安装脚本都使用 ksh,ksh 有 42 条内部命令，与 bash 相比有一定的限制性。</p><ul><li><strong>tcsh</strong></li></ul><p>tcsh 是 csh 的增强版，与 C shell 完全兼容。</p><ul><li><strong>sh</strong></li></ul><p>是一个快捷方式，已经被 /bin/bash 所取代。</p><ul><li><strong>nologin</strong></li></ul><p>指用户不能登录。</p><ul><li><strong>zsh</strong></li></ul><p>目前 Linux 里最庞大的一种 shell：zsh。它有 84 个内部命令，使用起来也比较复杂。一般情况下，不会使用该 shell。</p><h3 id="shell的作用"><a href="#shell的作用" class="headerlink" title="shell的作用"></a>shell的作用</h3><ul><li>命令解释器，让用户有个操作的界面，给用户提供了一个可以敲命令地方。</li><li>可以支持强大的编程语言的界面。允许用户编程。</li></ul><h2 id="Shell编程基础"><a href="#Shell编程基础" class="headerlink" title="Shell编程基础"></a>Shell编程基础</h2><h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><p>Shell 脚本（shell script），是一种为 shell 编写的脚本程序。</p><p>业界所说的 shell 通常都是指 shell 脚本，但读者朋友要知道，shell 和 shell script 是两个不同的概念。</p><p>由于习惯的原因，简洁起见，本文出现的 “shell编程” 都是指 shell 脚本编程，不是指开发 shell 自身。</p><p>作为可执行程序</p><pre class=" language-shell"><code class="language-shell">root@8c300f41b9f9:/home# ls     #查看该路径下文件HW.shroot@8c300f41b9f9:/home# cat HW.sh      #查看文件内容#!/bin/bashecho "Hello Dbapp!"root@8c300f41b9f9:/home# chmod +x HW.sh     #给文件增加执行权限root@8c300f41b9f9:/home# ./HW.sh        #执行Hello Dbapp!</code></pre><p><strong>#!</strong> 是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即使用哪一种 Shell</p><p>在执行时需要写成./HW.sh，而不能直接写HW.sh，否则会去PATH里寻找有没有叫HW.sh的路径（./表示当前路径）</p><p>作为解释器参数（不需要在第一行指定解释器信息）</p><pre class=" language-shell"><code class="language-shell">root@8c300f41b9f9:/home# ll HW.sh           #查看权限-rw-r--r-- 1 root root 20 Jul 28 09:29 HW.shroot@8c300f41b9f9:/home# cat HW.sh      #查看内容（没有指定解释器）echo "Hello Dbapp!"root@8c300f41b9f9:/home# /bin/bash HW.sh    #作为解释器的参数执行Hello Dbapp!</code></pre><h3 id="shell变量"><a href="#shell变量" class="headerlink" title="shell变量"></a>shell变量</h3><p>变量名<strong>定义时</strong>不需要加$符号</p><p>变量名的命名规则</p><ol><li>只能使用英文字母，数字和下划线，不能以数字开头</li><li>中间不能有空格，可以使用下划线</li><li>不能使用标点符号</li><li>不能使用bash里的关键字（可用help命令查看保留关键字）</li></ol><p>有效的变量名</p><pre class=" language-shell"><code class="language-shell">Toby3shawn_DASDbapp2JK_RL_PD</code></pre><p>无效的变量名</p><pre class=" language-shell"><code class="language-shell">+chr3skytoby shawnechobashdb、app</code></pre><h4 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h4><p>等号左右不能有空格</p><p>单引号赋值会直接输出引号内容</p><p>双引号赋值会先解析变量和命令，会进行转移</p><p>反引号``或者括号$()括起来的部分是shell命令部分</p><pre class=" language-shell"><code class="language-shell">root@8c300f41b9f9:/home# cat test.sh#!/bin/bashmy_id='123456'              #直接赋值echo $my_idfor file1 in `ls /home/dir1`        #通过语句赋值doecho $file1donefor file2 in $(ls /home/dir2)       #通过语句赋值doecho $file2doneroot@8c300f41b9f9:/home# ls *       #查看目录结构HW.sh  test.shdir1:1.txt  2.txt  3.txtdir2:a.txt  b.txt  c.txtroot@8c300f41b9f9:/home# ./test.sh1234561.txt                   #变量file1被赋值输出2.txt3.txta.txt                   #变量file2被赋值输出b.txtc.txt</code></pre><h4 id="变量使用"><a href="#变量使用" class="headerlink" title="变量使用"></a>变量使用</h4><pre class=" language-shell"><code class="language-shell">root@8c300f41b9f9:/home# cat test2.sh#!/bin/bashweather="cloudy"echo "It's $weather today"          #定义过的变量只要加$即可输出weather="cloudy"echo "It's $&#123;weather&#125; today"        #花括号是可选的weather="cloudy"echo "It's_$weather_today"          #weather_today会被当成新的变量weather="cloudy"echo "It's_$&#123;weather&#125;_today"        #与上一条对比，花括号为了定义变量的边界root@8c300f41b9f9:/home# ./test2.shIt's cloudy todayIt's cloudy todayIt's_It's_cloudy_today</code></pre><p>建议给所有变量都加上花括号</p><pre class=" language-shell"><code class="language-shell">name="pony"echo $namename="jack"echo $namename="pony"echo $name$name="jack"        #变量在赋值的时候不要加$符号echo $nameroot@8c300f41b9f9:/home# ./test3.shponyjackpony./test3.sh: line 8: pony=jack: command not foundpony</code></pre><p>只读与删除</p><pre class=" language-shell"><code class="language-shell">root@8c300f41b9f9:/home# cat test4.sh#!/bin/bashaddress="AHDS"name="shawn"readonly address            #设置为只读echo $addressecho $nameaddress="AHDS_2"            #赋值会失败name="shawn_2"              #赋值成功echo $address                   #输出原来的echo $name                      #输出新的unset address                   #删除变量（只读无法删除）unset name                      #删除变量echo $addressecho $nameroot@8c300f41b9f9:/home# ./test4.shAHDSshawn./test4.sh: line 11: address: readonly variableAHDSshawn_2./test4.sh: line 17: unset: address: cannot unset: readonly variableAHDS</code></pre><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>拼接字符串</p><pre class=" language-shell"><code class="language-shell">root@8c300f41b9f9:/home# cat test5.sh#!/bin/bashweather="cloudy"#双引号拼接today1="It is, "$weather" today"today2="It is, $&#123;weather&#125; today"echo $today1echo $today2#单引号拼接today3='It is, '$weather' today'today4='It is, $&#123;weather&#125; today'echo $today3echo $today4root@8c300f41b9f9:/home# ./test5.shIt is, cloudy todayIt is, cloudy todayIt is, cloudy todayIt is, $&#123;weather&#125; today</code></pre><p>子字符串</p><pre class=" language-shell"><code class="language-shell">root@8c300f41b9f9:/home# cat test6.sh#!/bin/bashstring="It's cloudy today"echo $&#123;#string&#125;                 #输出字符串的长度echo $&#123;string:5:6&#125;          #从第5个字符开始，截取6个输出echo `expr index "$&#123;string&#125;" d`     #查找d在字符串中首次出现的位置#expr 是一款表达式计算工具，使用它能完成表达式的求值操作root@8c300f41b9f9:/home# ./test6.sh17cloudy10</code></pre><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><pre class=" language-shell"><code class="language-shell">root@8c300f41b9f9:/home# cat test7.sh#!/bin/basharray1=(a b c d e)      #定义方式1array2=(                            #定义方式2fghij)array3[0]=A                     #定义方式3array3[1]=Barray3[2]=Cecho $&#123;array1[3]&#125;           #输出val=$array2[1]echo  $valecho $&#123;array3[@]&#125;           #@表示输出全部root@8c300f41b9f9:/home# ./test7.shdf[1]A B C</code></pre><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><pre class=" language-shell"><code class="language-shell">root@8c300f41b9f9:/home# cat test8.sh#this is danhang zhushi:<<EOFonetowthreeEOF:<<'onetwothree':<<!onetwothree!</code></pre><h3 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h3><p>expr 是一款表达式计算工具，使用它能完成表达式的求值操作</p><h4 id="算数运算"><a href="#算数运算" class="headerlink" title="算数运算"></a>算数运算</h4><pre class=" language-shell"><code class="language-shell">root@8c300f41b9f9:/home# cat test9.sh#!/bin/basha=10b=20val=`expr $a + $b`echo "a + b : $val"val=`expr $a - $b`echo "a - b : $val"val=`expr $a \* $b`             #乘号(*)前边必须加反斜杠(\)才能实现乘法运算echo "a * b : $val"val=`expr $b / $a`echo "b / a : $val"val=`expr $b % $a`echo "b % a : $val"if [ $a == $b ]then   echo "a =  b"fiif [ $a != $b ]then   echo "a != b"firoot@8c300f41b9f9:/home# ./test9.sha + b : 30a - b : -10a * b : 200b / a : 2b % a : 0a != b</code></pre><h4 id="关系运算"><a href="#关系运算" class="headerlink" title="关系运算"></a>关系运算</h4><pre class=" language-shell"><code class="language-shell">root@8c300f41b9f9:/home# cat test10.sh#!/bin/basha=10b=20if [ $a -eq $b ]        #是否等于then   echo "$a -eq $b : a = b"else   echo "$a -eq $b: a != b"fiif [ $a -ne $b ]        #是否不等then   echo "$a -ne $b: a != b"else   echo "$a -ne $b : a = b"fiif [ $a -gt $b ]        #是否大于then   echo "$a -gt $b: a > b"else   echo "$a -gt $b: a !> b"fiif [ $a -lt $b ]        #是否小于then   echo "$a -lt $b: a < b"else   echo "$a -lt $b: a !< b"fiif [ $a -ge $b ]        #是否大于等于then   echo "$a -ge $b: a >= b"else   echo "$a -ge $b: a < b"fiif [ $a -le $b ]        是否小于等于then   echo "$a -le $b: a <= b"else   echo "$a -le $b: a > b"firoot@8c300f41b9f9:/home# ./test10.sh10 -eq 20: a != b10 -ne 20: a != b10 -gt 20: a !> b10 -lt 20: a < b10 -ge 20: a < b10 -le 20: a <= b</code></pre><h4 id="布尔运算"><a href="#布尔运算" class="headerlink" title="布尔运算"></a>布尔运算</h4><p>优先级为： <strong>!</strong> 最高， <strong>-a</strong> 次之， <strong>-o</strong> 最低</p><table><thead><tr><th>运算符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>!</td><td>非运算，表达式为 true 则返回 false，否则返回 true。</td><td>[ ! false ] 返回 true。</td></tr><tr><td>-o</td><td>或运算，有一个表达式为 true 则返回 true。</td><td>[ $a -lt 20 -o $b -gt 100 ] 返回 true。</td></tr><tr><td>-a</td><td>与运算，两个表达式都为 true 才返回 true。</td><td>[ $a -lt 20 -a $b -gt 100 ] 返回 false。</td></tr></tbody></table><pre class=" language-shell"><code class="language-shell">#!/bin/basha=10b=20if [ $a != $b ]then   echo "$a != $b : a 不等于 b"else   echo "$a == $b: a 等于 b"fiif [ $a -lt 100 -a $b -gt 15 ]then   echo "$a 小于 100 且 $b 大于 15 : 返回 true"else   echo "$a 小于 100 且 $b 大于 15 : 返回 false"fiif [ $a -lt 100 -o $b -gt 100 ]then   echo "$a 小于 100 或 $b 大于 100 : 返回 true"else   echo "$a 小于 100 或 $b 大于 100 : 返回 false"fiif [ $a -lt 5 -o $b -gt 100 ]then   echo "$a 小于 5 或 $b 大于 100 : 返回 true"else   echo "$a 小于 5 或 $b 大于 100 : 返回 false"fi10 != 20 : a 不等于 b10 小于 100 且 20 大于 15 : 返回 true10 小于 100 或 20 大于 100 : 返回 true10 小于 5 或 20 大于 100 : 返回 false</code></pre><h4 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h4><pre class=" language-shell"><code class="language-shell">#!/bin/basha=10b=20if [[ $a -lt 100 && $b -gt 100 ]]then   echo "返回 true"else   echo "返回 false"fiif [[ $a -lt 100 || $b -gt 100 ]]then   echo "返回 true"else   echo "返回 false"fi返回 false返回 true</code></pre><h4 id="文件测试"><a href="#文件测试" class="headerlink" title="文件测试"></a>文件测试</h4><table><thead><tr><th>操作符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>-b file</td><td>检测文件是否是块设备文件，如果是，则返回 true。</td><td>[ -b $file ] 返回 false。</td></tr><tr><td>-c file</td><td>检测文件是否是字符设备文件，如果是，则返回 true。</td><td>[ -c $file ] 返回 false。</td></tr><tr><td>-d file</td><td>检测文件是否是目录，如果是，则返回 true。</td><td>[ -d $file ] 返回 false。</td></tr><tr><td>-f file</td><td>检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。</td><td>[ -f $file ] 返回 true。</td></tr><tr><td>-g file</td><td>检测文件是否设置了 SGID 位，如果是，则返回 true。</td><td>[ -g $file ] 返回 false。</td></tr><tr><td>-k file</td><td>检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。</td><td>[ -k $file ] 返回 false。</td></tr><tr><td>-p file</td><td>检测文件是否是有名管道，如果是，则返回 true。</td><td>[ -p $file ] 返回 false。</td></tr><tr><td>-u file</td><td>检测文件是否设置了 SUID 位，如果是，则返回 true。</td><td>[ -u $file ] 返回 false。</td></tr><tr><td>-r file</td><td>检测文件是否可读，如果是，则返回 true。</td><td>[ -r $file ] 返回 true。</td></tr><tr><td>-w file</td><td>检测文件是否可写，如果是，则返回 true。</td><td>[ -w $file ] 返回 true。</td></tr><tr><td>-x file</td><td>检测文件是否可执行，如果是，则返回 true。</td><td>[ -x $file ] 返回 true。</td></tr><tr><td>-s file</td><td>检测文件是否为空（文件大小是否大于0），不为空返回 true。</td><td>[ -s $file ] 返回 true。</td></tr><tr><td>-e file</td><td>检测文件（包括目录）是否存在，如果是，则返回 true。</td><td>[ -e $file ] 返回 true。</td></tr></tbody></table><p><strong>/var/www/runoob/test.sh</strong>，它的大小为 100 字节，具有 <strong>rwx</strong> 权限</p><pre class=" language-shell"><code class="language-shell">#!/bin/bashfile="/var/www/runoob/test.sh"if [ -r $file ]then   echo "文件可读"else   echo "文件不可读"fiif [ -w $file ]then   echo "文件可写"else   echo "文件不可写"fiif [ -x $file ]then   echo "文件可执行"else   echo "文件不可执行"fiif [ -f $file ]then   echo "文件为普通文件"else   echo "文件为特殊文件"fiif [ -d $file ]then   echo "文件是个目录"else   echo "文件不是个目录"fiif [ -s $file ]then   echo "文件不为空"else   echo "文件为空"fiif [ -e $file ]then   echo "文件存在"else   echo "文件不存在"fi文件可读文件可写文件可执行文件为普通文件文件不是个目录文件不为空文件存在</code></pre><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><h4 id="if条件语句"><a href="#if条件语句" class="headerlink" title="if条件语句"></a>if条件语句</h4><pre class=" language-shell"><code class="language-shell">root@8c300f41b9f9:/home# cat test11.sh#!/bin/basha=5b=6if [ $a == $b ]then    echo "="elif [ $a -gt $b ]then    echo ">"else    echo "<"firoot@8c300f41b9f9:/home# ./test11.sh<#将以上代码写成一行root@8c300f41b9f9:/home# a=5; b=6; if [ $a == $b ]; then echo "="; elif [ $a -gt $b ]; then echo ">"; else echo "<"; fi<</code></pre><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><pre class=" language-shell"><code class="language-shell">root@8c300f41b9f9:/home# cat test12.sh#!/bin/bashfor num in a bb ccc dddd eeeeedo    echo $numdoneroot@8c300f41b9f9:/home# ./test12.shabbcccddddeeeee#将以上代码写成一句root@8c300f41b9f9:/home# for num in a bb ccc dddd eeeee; do echo $num; doneabbcccddddeeeee</code></pre><h4 id="while条件循环"><a href="#while条件循环" class="headerlink" title="while条件循环"></a>while条件循环</h4><p>let 命令是 BASH 中用于计算的工具，用于执行一个或多个表达式，变量计算中不需要加上 $ 来表示变量。如果表达式中包含了空格或其他特殊字符，则必须引起来。</p><pre class=" language-shell"><code class="language-shell">root@8c300f41b9f9:/home# cat test13.sh#!/bin/bashnum=10while(($num<=15))do    echo $num    let "num++"doneroot@8c300f41b9f9:/home# ./test13.sh101112131415</code></pre><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="Shell运维命令"><a href="#Shell运维命令" class="headerlink" title="Shell运维命令"></a>Shell运维命令</h2><h3 id="安装工具"><a href="#安装工具" class="headerlink" title="安装工具"></a>安装工具</h3><p><strong>CentOS</strong></p><p>yum</p><p><strong>Ubuntu</strong></p><p>apt</p><h3 id="网络相关"><a href="#网络相关" class="headerlink" title="网络相关"></a>网络相关</h3><p>ifconfig</p><p>ip addr</p><p>arp</p><p>ifup</p><p>netstat</p><p>ping</p><p>traceroute</p><p>ssh</p><h3 id="文件目录相关"><a href="#文件目录相关" class="headerlink" title="文件目录相关"></a>文件目录相关</h3><p>sed</p><p>awk</p><p>grep</p><p>find</p><p>mv</p><p>cp</p><p>rm</p><p>head</p><p>tail</p><p>ls</p><p>cd</p><p>mkdir</p><p>rmdir</p><p>cat</p><p>tac</p><p>more</p><p>less</p><p>file</p><p>chmod</p><p>chown</p><p>sort</p><p>uniq</p><p>wc</p><p>vi/vim</p><p>wget</p><p>rz</p><p>sz</p><p>tar</p><p>unzip</p><h3 id="进程相关"><a href="#进程相关" class="headerlink" title="进程相关"></a>进程相关</h3><p>ps</p><p>top</p><p>kill</p><h3 id="系统相关"><a href="#系统相关" class="headerlink" title="系统相关"></a>系统相关</h3><p>date</p><p>cal</p><p>uname</p><p>whoami</p><p>hostname</p><p>df</p><p>mount</p><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>locate</p><p>whereis</p><p>grep</p><p>find</p><p>which</p><h3 id="用户相关"><a href="#用户相关" class="headerlink" title="用户相关"></a>用户相关</h3><p>last</p><p>lastb</p><p>who</p><p>useradd</p><p>userdel</p><p>id</p><p>whoami</p><p>usermod</p><p>passwd</p><p>groupadd</p><h3 id="服务相关"><a href="#服务相关" class="headerlink" title="服务相关"></a>服务相关</h3><p>service</p><p>systemctl</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基本操作2</title>
      <link href="/2021/08/28/Linux%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C2/"/>
      <url>/2021/08/28/Linux%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C2/</url>
      
        <content type="html"><![CDATA[<h1 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h1><h2 id="网卡配置"><a href="#网卡配置" class="headerlink" title="网卡配置"></a>网卡配置</h2><h3 id="Centos-7"><a href="#Centos-7" class="headerlink" title="Centos 7"></a>Centos 7</h3><p>修改位置</p><pre class=" language-shell"><code class="language-shell">/etc/sysconfig/network-scripts/ifcfg-xxx</code></pre><p>内容解析</p><pre class=" language-shell"><code class="language-shell">TYPE="Ethernet"                        #配置文件接口类型DEVICE="eth0"                            #网络接口名称BOOTPROTO="static"                #系统启动地址协议：static、dhcp、bootp、noneNM_CONTROLLED="no"                #是否由Network Manager控制该网络接口ONBOOT="yes"                           #启动时是否激活UUID=27137241-842e-4e50-88dd-8d8da1305dc0DEFROUTE=yes                          #是否默认路由IPADDR=192.168.1.1                #ip地址NETMASK=255.255.255.0            #子网掩码GATEWAY=192.168.1.254            #网关地址BROADCAST=192.168.1.255        #广播地址HWADDR=00:0C:29:13:5D:74    #MAC地址#MACADDR=                                    #MAC地址，只需要设置一个，不能冲突DNS1=114.114.114.114            #dnsDNS2=8.8.8.8                            #dnsHWADDR=00:90:27:50:5B:30ARPCHECK=no</code></pre><p>配置完成后</p><pre class=" language-shell"><code class="language-shell">service network restart#或systemctl restart network#或reboot</code></pre><h3 id="Ubuntu-18-04之前"><a href="#Ubuntu-18-04之前" class="headerlink" title="Ubuntu 18.04之前"></a>Ubuntu 18.04之前</h3><p>修改位置</p><pre class=" language-shell"><code class="language-shell">/etc/network/interfaces</code></pre><p>内容解析</p><pre class=" language-shell"><code class="language-shell">auto loiface lo inet loopback#static设置auto eth0iface eth0 inet static     address 192.168.1.1                #IP地址     netmask 255.255.255.0            #掩码     broadcast 192.168.1.255        #广播地址     gateway 192.168.1.254            #网关#dhcp设置auto eth1iface eth1 inet dhcp</code></pre><h3 id="Ubuntu-18-04及之后"><a href="#Ubuntu-18-04及之后" class="headerlink" title="Ubuntu 18.04及之后"></a>Ubuntu 18.04及之后</h3><p>修改位置</p><pre class=" language-shell"><code class="language-shell">ls /etc/netplan/vim /etc/netplan/*.yaml</code></pre><p>dhcp</p><pre class=" language-shell"><code class="language-shell">network:  version: 2  renderer: networkd  ethernets:    enp3s0:      dhcp4: true</code></pre><p>static</p><pre class=" language-shell"><code class="language-shell">network:  version: 2  renderer: networkd  ethernets:    enp3s0:      addresses:        - 10.10.10.2/24      gateway4: 10.10.10.1      nameservers:          search: [mydomain, otherdomain]          addresses: [10.10.10.1, 1.1.1.1]</code></pre><p>应用/重启服务</p><pre class=" language-shell"><code class="language-shell">netplan apply#服务器版systemctl restart system-networkd#桌面版systemctl restart network-manager</code></pre><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><h3 id="网卡"><a href="#网卡" class="headerlink" title="网卡"></a>网卡</h3><p>ifconfig 网卡名</p><pre class=" language-shell"><code class="language-shell">root@ubuntu:~/test# ifconfig eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500        inet 10.211.55.4  netmask 255.255.255.0  broadcast 10.211.55.255        inet6 fe80::21c:42ff:feb3:a11c  prefixlen 64  scopeid 0x20<link>        inet6 fdb2:2c26:f4e4:0:21c:42ff:feb3:a11c  prefixlen 64  scopeid 0x0<global>        ether 00:1c:42:b3:a1:1c  txqueuelen 1000  (Ethernet)        RX packets 99713  bytes 119236458 (119.2 MB)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 18746  bytes 1594851 (1.5 MB)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0lo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536        inet 127.0.0.1  netmask 255.0.0.0        inet6 ::1  prefixlen 128  scopeid 0x10<host>        loop  txqueuelen 1000  (Local Loopback)        RX packets 548  bytes 44159 (44.1 KB)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 548  bytes 44159 (44.1 KB)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</code></pre><p>ifconfig 网卡名 up/down</p><pre class=" language-shell"><code class="language-shell">root@ubuntu:~/test# ifconfig eth0 downroot@ubuntu:~/test# ifconfig eth0 up</code></pre><p>ifdown/ifup 网卡名</p><pre class=" language-shell"><code class="language-shell">root@ubuntu:~/test# ifdown eth0root@ubuntu:~/test# ifup eth0</code></pre><p>网络服务</p><pre class=" language-shell"><code class="language-shell">service NetworkManager status #用户桌面式网络管理（shell中强烈建议关闭此服务）service network status #查看服务状态systemctl status networking #查看服务状态status位置还可以使用stop/start/restart，分别是停止、启用、重启</code></pre><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p>route：显示路由表</p><pre class=" language-shell"><code class="language-shell">root@ubuntu:~/test# routeKernel IP routing tableDestination     Gateway         Genmask         Flags Metric Ref    Use Ifacedefault         _gateway        0.0.0.0         UG    100    0        0 eth010.211.55.0     0.0.0.0         255.255.255.0   U     0      0        0 eth0_gateway        0.0.0.0         255.255.255.255 UH    100    0        0 eth0</code></pre><p>netstat 显示网络状态<br>-n或–numeric 直接使用IP地址，而不通过域名服务器<br>-t或–tcp 显示TCP传输协议的连线状况<br>-u或–udp 显示UDP传输协议的连线状况<br>-r 显示路由表，同route命令<br>-l 仅列出在监听状态网络服务<br>-a 列出所有的网络连接</p><pre class=" language-shell"><code class="language-shell">root@ubuntu:~/test# netstat -ntlpActive Internet connections (only servers)Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    tcp        0      0 127.0.0.53:53           0.0.0.0:*               LISTEN      652/systemd-resolve tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      711/sshd: /usr/sbin tcp6       0      0 :::22                   :::*                    LISTEN      711/sshd: /usr/sbin </code></pre><h1 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h1><p>Linux存在运行级别，可以理解为操作系统当前正在运行的程序的级别，程序的运行级别有以下0~6共7个运行级别</p><table><thead><tr><th><strong>运行级别</strong></th><th><strong>效果</strong></th></tr></thead><tbody><tr><td>0</td><td>关机</td></tr><tr><td>1</td><td>单用户模式，只允许root登陆，作为维护使用</td></tr><tr><td>2</td><td>多用户，不完全的命令行模式，不支持网络功能（没NFS）</td></tr><tr><td>3</td><td>多用户，完全的命令行模式，带网络（有NFS）,默认进入文本模式</td></tr><tr><td>4</td><td>系统保留，但是默认和级别3相同</td></tr><tr><td>5</td><td>图形化界面，默认进入图形界面</td></tr><tr><td>6</td><td>重启</td></tr></tbody></table><p>输入runlevel可以查看当前的运行级别</p><pre class=" language-shell"><code class="language-shell">root@ubuntu:/# runlevel N 5</code></pre><p>使用init 可以进入其他运行级别，如init 0为关机，init6为重启</p><p>在/etc文件夹下存在rc*.d的文件夹，系统会根据指定的运行级别进入对应的rc*.d目录，并按照文件名顺序检索目录下的链接文件</p><pre class=" language-shell"><code class="language-shell">root@ubuntu:/# ls /etc/ | grep rcrc0.drc1.drc2.drc3.drc4.drc5.drc6.drcS.d</code></pre><h2 id="服务管理与控制"><a href="#服务管理与控制" class="headerlink" title="服务管理与控制"></a>服务管理与控制</h2><p>service 管理服务的命令<br>service 服务名 status/stop/start/restart 管理服务的启停</p><pre class=" language-shell"><code class="language-shell">root@ubuntu:/# service ssh status● ssh.service - OpenBSD Secure Shell server     Loaded: loaded (/lib/systemd/system/ssh.service; enabled; vendor preset: enabled)     Active: active (running) since Mon 2021-08-30 08:30:09 UTC; 10min ago       Docs: man:sshd(8)             man:sshd_config(5)    Process: 685 ExecStartPre=/usr/sbin/sshd -t (code=exited, status=0/SUCCESS)   Main PID: 715 (sshd)      Tasks: 1 (limit: 2232)     Memory: 5.9M     CGroup: /system.slice/ssh.service             └─715 sshd: /usr/sbin/sshd -D [listener] 0 of 10-100 startupsAug 30 08:30:09 ubuntu systemd[1]: Starting OpenBSD Secure Shell server...Aug 30 08:30:09 ubuntu sshd[715]: Server listening on 0.0.0.0 port 22.Aug 30 08:30:09 ubuntu sshd[715]: Server listening on :: port 22.Aug 30 08:30:09 ubuntu systemd[1]: Started OpenBSD Secure Shell server.Aug 30 08:30:18 ubuntu sshd[865]: Accepted password for shawn from 10.211.55.2 port 65372 ssh2Aug 30 08:30:18 ubuntu sshd[865]: pam_unix(sshd:session): session opened for user shawn by (uid=0)root@ubuntu:/# service ssh restartroot@ubuntu:/# </code></pre><p>systemctl start/stop/restart/status 服务名.service</p><pre class=" language-shell"><code class="language-shell">root@ubuntu:/# systemctl status ssh● ssh.service - OpenBSD Secure Shell server     Loaded: loaded (/lib/systemd/system/ssh.service; enabled; vendor preset: enabled)     Active: active (running) since Mon 2021-08-30 08:41:11 UTC; 2min 8s ago       Docs: man:sshd(8)             man:sshd_config(5)   Main PID: 1687 (sshd)      Tasks: 1 (limit: 2232)     Memory: 1.1M     CGroup: /system.slice/ssh.service             └─1687 sshd: /usr/sbin/sshd -D [listener] 0 of 10-100 startupsAug 30 08:41:11 ubuntu systemd[1]: ssh.service: Succeeded.Aug 30 08:41:11 ubuntu systemd[1]: Stopped OpenBSD Secure Shell server.Aug 30 08:41:11 ubuntu systemd[1]: Starting OpenBSD Secure Shell server...Aug 30 08:41:11 ubuntu sshd[1687]: Server listening on 0.0.0.0 port 22.Aug 30 08:41:11 ubuntu sshd[1687]: Server listening on :: port 22.Aug 30 08:41:11 ubuntu systemd[1]: Started OpenBSD Secure Shell server.root@ubuntu:/# systemctl restart sshroot@ubuntu:/# </code></pre><h1 id="软件管理"><a href="#软件管理" class="headerlink" title="软件管理"></a>软件管理</h1><p>Linux的软件一般可以通过以下几种方式来安装</p><ul><li>源码<ul><li>需要通过编译成二进制文件才能进行使用，较为麻烦，但是兼容性好，可以在离线形式下安装</li></ul></li><li>RPM<ul><li>将源代码基于特定平台系统进行编译成可执行文件，保持依赖关系</li></ul></li><li>yum<ul><li>可以解决依赖关系，无需手动逐个安装RPM包</li></ul></li><li>apt/apt-get<ul><li>类似yum，但是是debian，ubuntu发行版的管理工具</li></ul></li></ul><h2 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h2><ol><li>./configure      定义需要的功能选项<br>检测系统环境是否符合安装要求<br>把定义好的功能选项和检测系统环境的信息都填写入makefile文件，用于后续的编辑<br>./configure –prefix=/usr/local/apache2  源码包一定要指定安装位置</li><li>make                     编译<br>make命令会根据当前软件开发时的语言，自动识别跟调用相应的编译器，进行二进制编译</li><li>make install       编译安装<br>进行软件的安装（设置启动文件、移动执行文件）</li></ol><p>卸载时直接删除安装目录即可，不会遗留任何垃圾文件</p><ul><li>优点：<pre><code>开源，如果有足够的能力，可以修改源代码可以自由选择所需的功能软件是编译安装，所以更加适合自己的系统，更加稳定、效率更高卸载方便（安装目录直接删掉，没有任何垃圾文件）</code></pre></li><li>缺点：<pre><code>安装过程步骤较多，尤其安装较大的软件集合时（如LAMP环境搭建）编译过程时间较长因为是编译安装，安装过程中一旦报错新手很难解决</code></pre></li></ul><h2 id="RPM包安装"><a href="#RPM包安装" class="headerlink" title="RPM包安装"></a>RPM包安装</h2><p>命名规则：name-version-release.arch.rpm</p><p>httpd-2.2.15-15.el6.centos.1.i686.rpm</p><ul><li>httpd:软件包名</li><li>2.2.15:软件版本</li><li>15:软件发布的次数</li><li>el6:软件发行商，el6表示此包是由redhat公司发布</li><li>centos:适合的linux平台</li><li>i686:适合的硬件平台</li><li>rpm:rpm包扩展名</li></ul><h3 id="安装命令"><a href="#安装命令" class="headerlink" title="安装命令"></a>安装命令</h3><p>rpm -ivh 包全名<br>选项：<br>    -i 安装<br>    -v 显示详细信息<br>    -h 显示安装进度<br>    –nodeps 不检测依赖性</p><h3 id="升级命令"><a href="#升级命令" class="headerlink" title="升级命令"></a>升级命令</h3><p>rpm -Uvh 包全名</p><h3 id="卸载命令"><a href="#卸载命令" class="headerlink" title="卸载命令"></a>卸载命令</h3><p>rpm -e 包名<br>选项：<br>    -e  卸载<br>    –nodeps 不检查依赖性</p><h2 id="YUM"><a href="#YUM" class="headerlink" title="YUM"></a>YUM</h2><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>yum list         #查询所有可用软件包列表<br>yum search 关键字      #搜索服务器上所有和关键字相关的包<br>例：yum search httpd</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>yum -y install 包名<br>选项：<br>    install 安装<br>    -y  自动回答yes<br>例如：yum -y install gcc<br>yum安装只写包名即可。</p><h3 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h3><p>yum -y update 包名<br>选项：<br>    -update 升级<br>    -y 自动回答yes</p><h4 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h4><p>yum -y remove 包名<br>选项：<br>    -remove 卸载<br>    -y 自动回答yes</p><h2 id="镜像源"><a href="#镜像源" class="headerlink" title="镜像源"></a>镜像源</h2><p>需在<strong>root</strong>权限下</p><h3 id="Centos-7-1"><a href="#Centos-7-1" class="headerlink" title="Centos 7"></a>Centos 7</h3><pre class=" language-shell"><code class="language-shell">#1、做好备份，为了更新失败时切换回去mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup#2、进入yum源配置文件夹cd /etc/yum.repos.d/#3、下载对应的新源，以下任选一句wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo curl -O http://mirrors.aliyun.com/repo/Centos-7.repo #4执行更新yum clean allyum makecacheyum -y update</code></pre><h3 id="Ubuntu-18-04"><a href="#Ubuntu-18-04" class="headerlink" title="Ubuntu 18.04"></a>Ubuntu 18.04</h3><pre class=" language-shell"><code class="language-shell">#1、备份原文件cp /etc/apt/sources.list /etc/apt/sources.list.bak#2、新增源文件vim /etc/apt/sources.list#3、输入以下内容，可根据版本在网上找到合适的源#4、执行更新apt-get updateapt-get upgrade</code></pre><pre class=" language-shell"><code class="language-shell"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ eoan main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ eoan main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ eoan-updates main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ eoan-updates main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ eoan-backports main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ eoan-backports main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ eoan-security main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ eoan-security main restricted universe multiverse</code></pre><h3 id="Ubuntu-ARM"><a href="#Ubuntu-ARM" class="headerlink" title="Ubuntu ARM"></a>Ubuntu ARM</h3><pre class=" language-shell"><code class="language-shell"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic-updates main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic-updates main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic-backports main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic-backports main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic-security main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic-security main restricted universe multiverse</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础操作1</title>
      <link href="/2021/08/27/Linux%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C1/"/>
      <url>/2021/08/27/Linux%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C1/</url>
      
        <content type="html"><![CDATA[<h1 id="文件目录操作"><a href="#文件目录操作" class="headerlink" title="文件目录操作"></a>文件目录操作</h1><h3 id="ls：查询目录中内容"><a href="#ls：查询目录中内容" class="headerlink" title="ls：查询目录中内容"></a>ls：查询目录中内容</h3><pre class=" language-shell"><code class="language-shell">root@ubuntu:~# lsjpk  snap  test.sh  xyz.txt#显示所有文件（包含隐藏文件）root@ubuntu:~# ls -a.  ..  .bash_history  .bashrc  .cache  jpk  .profile  snap  .ssh  test.sh  .viminfo  xyz.txt#显示文件或目录的详细信息，文件的属性、大小等root@ubuntu:~# ls -ltotal 16-rw-r--r-- 1 root root    4 Aug 27 09:15 jpkdrwxr-xr-x 3 root root 4096 Jun  7 06:02 snap-rwxr-xr-x 1 root root    4 Aug 27 09:15 test.sh-rw-r--r-- 1 root root    4 Aug 27 09:15 xyz.txt#显示当前目录本身的属性，而不是目录下的文件root@ubuntu:~# ls -d.#显示文件或目录的inoderoot@ubuntu:~# ls -i1573377 jpk  1573351 snap  1573376 test.sh  1573378 xyz.txt</code></pre><h3 id="cd：切换目录"><a href="#cd：切换目录" class="headerlink" title="cd：切换目录"></a>cd：切换目录</h3><h3 id="pwd：查看当前目录"><a href="#pwd：查看当前目录" class="headerlink" title="pwd：查看当前目录"></a>pwd：查看当前目录</h3><pre class=" language-shell"><code class="language-shell">#查看当前目录root@ubuntu:/# pwd/#进入bin目录root@ubuntu:/# cd bin#查看当前目录root@ubuntu:/bin# pwd/bin</code></pre><h3 id="touch、vi、vim：创建文件"><a href="#touch、vi、vim：创建文件" class="headerlink" title="touch、vi、vim：创建文件"></a>touch、vi、vim：创建文件</h3><pre class=" language-shell"><code class="language-shell">#touch#若文件不存在，系统会建立一个新的空白文件。#若文件存在，修改文件或者目录的时间属性，包括存取时间和更改时间。root@ubuntu:~/test# ls123.txtroot@ubuntu:~/test# touch 456.txtroot@ubuntu:~/test# ls123.txt  456.txt</code></pre><pre class=" language-shell"><code class="language-shell">#vi、vim#使用该命令创建文件，必须输入内容保存成功之后，该文件才会生效。root@ubuntu:~/test# vi 789.txtf</code></pre><p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210828091051280.png" alt="image-20210828091051280"></p><p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210828091436596.png" alt="image-20210828091436596"></p><p>按下“Esc”，按下“:”，输入“wq”后保存退出</p><p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210828092029329.png" alt="image-20210828092029329"></p><p>已创建新文件</p><pre class=" language-shell"><code class="language-shell">root@ubuntu:~/test# ls123.txt  456.txt  789.txt</code></pre><h3 id="mkdir：创建目录，-p参数递归创建"><a href="#mkdir：创建目录，-p参数递归创建" class="headerlink" title="mkdir：创建目录，-p参数递归创建"></a>mkdir：创建目录，-p参数递归创建</h3><pre class=" language-shell"><code class="language-shell">#创建新文件夹newroot@ubuntu:~/test# mkdir newroot@ubuntu:~/test# ls123.txt  456.txt  789.txt  new#递归创建root@ubuntu:~/test# mkdir -p new2/2.2/2.3root@ubuntu:~/test# tree.├── 123.txt├── 456.txt├── 789.txt├── new└── new2    └── 2.2        └── 2.34 directories, 3 files</code></pre><h3 id="rmdir：删除空目录"><a href="#rmdir：删除空目录" class="headerlink" title="rmdir：删除空目录"></a>rmdir：删除<strong>空目录</strong></h3><pre class=" language-shell"><code class="language-shell">#删除空目录root@ubuntu:~/test# rmdir new#删除非空目录，报错root@ubuntu:~/test# rmdir new2/rmdir: failed to remove 'new2/': Directory not emptyroot@ubuntu:~/test# ls123.txt  456.txt  789.txt  new2</code></pre><h3 id="rm：删除文件或目录，-r递归删除，-f强制删除"><a href="#rm：删除文件或目录，-r递归删除，-f强制删除" class="headerlink" title="rm：删除文件或目录，-r递归删除，-f强制删除"></a>rm：删除文件或目录，-r递归删除，-f强制删除</h3><pre class=" language-shell"><code class="language-shell">root@ubuntu:~/test# rm new2/rm: cannot remove 'new2/': Is a directory#递归强制删除root@ubuntu:~/test# rm -rf new2/root@ubuntu:~/test# ls123.txt  456.txt  789.txtroot@ubuntu:~/test# </code></pre><h3 id="cp：复制文件或目录，若目标存在则会询问是否覆盖，-p保留原文件属性，-r递归复制，-a-rp"><a href="#cp：复制文件或目录，若目标存在则会询问是否覆盖，-p保留原文件属性，-r递归复制，-a-rp" class="headerlink" title="cp：复制文件或目录，若目标存在则会询问是否覆盖，-p保留原文件属性，-r递归复制，-a=-rp"></a>cp：复制文件或目录，若目标存在则会询问是否覆盖，-p保留原文件属性，-r递归复制，-a=-rp</h3><pre class=" language-shell"><code class="language-shell">root@ubuntu:~/test# cp 789.txt copy.txtroot@ubuntu:~/test# ls123.txt  456.txt  789.txt  copy.txtroot@ubuntu:~/test# cat 789.txt copy.txt 插入一些文字插入一些文字</code></pre><h3 id="mv：移动或改名"><a href="#mv：移动或改名" class="headerlink" title="mv：移动或改名"></a>mv：移动或改名</h3><pre class=" language-shell"><code class="language-shell">#查看test目录，空root@ubuntu:~/test# ls test/#移动123.txt到目录下root@ubuntu:~/test# mv 123.txt test/#改名root@ubuntu:~/test# mv 456.txt abc#检验root@ubuntu:~/test# tree .├── 789.txt├── abc├── copy.txt└── test    └── 123.txt1 directory, 4 files</code></pre><h3 id="file：查看文件类型（有些类型被修改过或不显示后缀名）"><a href="#file：查看文件类型（有些类型被修改过或不显示后缀名）" class="headerlink" title="file：查看文件类型（有些类型被修改过或不显示后缀名）"></a>file：查看文件类型（有些类型被修改过或不显示后缀名）</h3><pre class=" language-shell"><code class="language-shell">root@ubuntu:~/test# file abc abc: ASCII textroot@ubuntu:~/test# file 789.txt 789.txt: UTF-8 Unicode text#修改后缀名root@ubuntu:~/test# mv 789.txt 789.pngroot@ubuntu:~/test# file 789.png 789.png: UTF-8 Unicode text</code></pre><p>dd：复制与分离，按照数据块，if输入文件，of输出文件，bs块大小，count块个数</p><pre class=" language-shell"><code class="language-shell">1681387       0x19A7EB        Zip archive data, at least v2.0 to extract, compressed size: 304, uncompressed size: 1483, name: word/_rels/document.xml.rels1681749       0x19A955        Zip archive data, at least v2.0 to extract, compressed size: 377, uncompressed size: 1482, name: [Content_Types].xml1683872       0x19B1A0        End of Zip archive, footer length: 22root@ubuntu:~/test# dd if=Golang.docx of=123.txt bs=1681749                                            9:52:471+1 records in1+1 records out1683927 bytes transferred in 0.000922 secs (1826455069 bytes/sec)                                                                    </code></pre><h1 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h1><h3 id="locate：在后台数据库中搜索文件，速度快，但是不是实时的"><a href="#locate：在后台数据库中搜索文件，速度快，但是不是实时的" class="headerlink" title="locate：在后台数据库中搜索文件，速度快，但是不是实时的"></a>locate：在后台数据库中搜索文件，速度快，但是不是实时的</h3><pre class=" language-shell"><code class="language-shell">#更新数据库root@ubuntu:~/test# updatedb#查找root@ubuntu:~/test# locate abc /root/test/abc</code></pre><h3 id="whereis：搜索系统命令"><a href="#whereis：搜索系统命令" class="headerlink" title="whereis：搜索系统命令"></a>whereis：搜索系统命令</h3><pre class=" language-shell"><code class="language-shell">root@ubuntu:~/test# whereis pwdpwd: /usr/bin/pwd /usr/share/man/man1/pwd.1.gz</code></pre><h3 id="which：搜索命令，可以通过别名搜到"><a href="#which：搜索命令，可以通过别名搜到" class="headerlink" title="which：搜索命令，可以通过别名搜到"></a>which：搜索命令，可以通过别名搜到</h3><pre class=" language-shell"><code class="language-shell">root@ubuntu:~/test# which ls/usr/bin/ls</code></pre><h3 id="find：指定条件查找文件，find-搜索范围-搜索条件-搜索内容"><a href="#find：指定条件查找文件，find-搜索范围-搜索条件-搜索内容" class="headerlink" title="find：指定条件查找文件，find  [搜索范围] [搜索条件] [搜索内容]"></a>find：指定条件查找文件，find  [搜索范围] [搜索条件] [搜索内容]</h3><pre class=" language-shell"><code class="language-shell">root@ubuntu:~/test# find /root -name test/root/test/root/test/test#–iname 不区分大小写；#–user 按照所有者搜索#–nouser 查找没有所有者的文件#...</code></pre><h3 id="通配符，-、？、"><a href="#通配符，-、？、" class="headerlink" title="通配符，*、？、[]"></a>通配符，*、？、[]</h3><pre class=" language-shell"><code class="language-shell">#?表示匹配任意单个字符root@ubuntu:~/test# find /root -name te?t/root/test/root/test/test#*表示匹配任意字符root@ubuntu:~/test# find /root -name te*/root/test/root/test/test#[]表示匹配其中任意一个字符root@ubuntu:~/test# find /root -name te[asd]t/root/test/root/test/test</code></pre><h3 id="grep：在文件中匹配字符串，-i忽略大小写"><a href="#grep：在文件中匹配字符串，-i忽略大小写" class="headerlink" title="grep：在文件中匹配字符串，-i忽略大小写"></a>grep：在文件中匹配字符串，-i忽略大小写</h3><pre class=" language-shell"><code class="language-shell">root@ubuntu:~/test# grep 998 file.txt 123456789987654321root@ubuntu:~/test# cat file.txt | grep xsw1qazxsw23edcvfr4</code></pre><h1 id="压缩与解压"><a href="#压缩与解压" class="headerlink" title="压缩与解压"></a>压缩与解压</h1><h3 id="zip、unzip：压缩解压-zip格式"><a href="#zip、unzip：压缩解压-zip格式" class="headerlink" title="zip、unzip：压缩解压.zip格式"></a>zip、unzip：压缩解压.zip格式</h3><pre class=" language-shell"><code class="language-shell">#压缩root@ubuntu:~/test# zip 789.zip 789.png   adding: 789.png (stored 0%)root@ubuntu:~/test# ls789.png  789.zip  abc  copy.txt  file.txt  test#解压root@ubuntu:~/test# unzip 789.zip Archive:  789.zipreplace 789.png? [y]es, [n]o, [A]ll, [N]one, [r]ename: y  #覆盖 extracting: 789.png</code></pre><h3 id="gzip、gunzip：压缩解压-gz格式"><a href="#gzip、gunzip：压缩解压-gz格式" class="headerlink" title="gzip、gunzip：压缩解压.gz格式"></a>gzip、gunzip：压缩解压.gz格式</h3><pre class=" language-shell"><code class="language-shell">#压缩文件，原文件不保留root@ubuntu:~/test# gzip 789.png root@ubuntu:~/test# ls789.png.gz  789.zip  abc  copy.txt  file.txt  test#压缩文科，原文件保留root@ubuntu:~/test# gzip -c abc > abc.gz#压缩目录下的文件root@ubuntu:~/test# gzip -r test/root@ubuntu:~/test# ls test/123.txt.gz#解压root@ubuntu:~/test# gzip -d 789.png.gz root@ubuntu:~/test# ls789.png  789.zip  abc  abc.gz  copy.txt  file.txt.gz  test#解压root@ubuntu:~/test# gunzip file.txt.gz root@ubuntu:~/test# ls789.png  789.zip  abc  abc.gz  copy.txt  file.txt  test#gzip只能压缩文件 , 不能压缩目录 ,后缀名为.gz , 而且不保留源文件</code></pre><h3 id="bzip2、bunzip2：压缩与解压缩bz2格式"><a href="#bzip2、bunzip2：压缩与解压缩bz2格式" class="headerlink" title="bzip2、bunzip2：压缩与解压缩bz2格式"></a>bzip2、bunzip2：压缩与解压缩bz2格式</h3><pre class=" language-shell"><code class="language-shell">#压缩，不保留root@ubuntu:~/test# bzip2 789.png root@ubuntu:~/test# ls789.png.bz2  789.zip  abc  abc.gz  copy.txt  file.txt  test#压缩，保留root@ubuntu:~/test# bzip2 -k copy.txt root@ubuntu:~/test# ls789.png.bz2  789.zip  abc  abc.gz  copy.txt  copy.txt.bz2  file.txt  test#解压root@ubuntu:~/test# bzip2 -d copy.txt.bz2 bzip2: Output file copy.txt already exists.#解压root@ubuntu:~/test# bunzip2 copy.txt.bz2 bunzip2: Output file copy.txt already exists.</code></pre><h3 id="tar：tar-cvf-打包文件名-源文件。"><a href="#tar：tar-cvf-打包文件名-源文件。" class="headerlink" title="tar：tar  -cvf  打包文件名  源文件。"></a>tar：tar  -cvf  打包文件名  源文件。</h3><p>-c 打包，-v 显示过程，-f 指定打包后的文件名，-z为.tar.gz格式，-j为.tar.bz2格式，-x  解压缩.tar.gz格式</p><pre class=" language-shell"><code class="language-shell">root@ubuntu:~/test# lsabc#打包root@ubuntu:~/test# tar -zcvf abc.tar.gz abc abc#删除原文件root@ubuntu:~/test# rm abc root@ubuntu:~/test# lsabc.tar.gz#解压root@ubuntu:~/test# tar -zxvf abc.tar.gz abcroot@ubuntu:~/test# lsabc  abc.tar.gz</code></pre><h1 id="文本基本命令"><a href="#文本基本命令" class="headerlink" title="文本基本命令"></a>文本基本命令</h1><h3 id="cat命令用于查看纯文本文件（内容较少的），格式为“cat-选项-文件-”。"><a href="#cat命令用于查看纯文本文件（内容较少的），格式为“cat-选项-文件-”。" class="headerlink" title="cat命令用于查看纯文本文件（内容较少的），格式为“cat [选项] [文件]”。"></a>cat命令用于查看纯文本文件（内容较少的），格式为“cat [选项] [文件]”。</h3><p>选项的值：-n  显示行号</p><pre class=" language-shell"><code class="language-shell">root@ubuntu:/# cat /etc/passwd -n     1    root:x:0:0:root:/root:/bin/bash     2    daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin     3    bin:x:2:2:bin:/bin:/usr/sbin/nologin     4    sys:x:3:3:sys:/dev:/usr/sbin/nologin     5    sync:x:4:65534:sync:/bin:/bin/sync     6    games:x:5:60:games:/usr/games:/usr/sbin/nologin</code></pre><h3 id="more命令用于查看纯文本文件（内容较多的），格式为“more-文件”。"><a href="#more命令用于查看纯文本文件（内容较多的），格式为“more-文件”。" class="headerlink" title="more命令用于查看纯文本文件（内容较多的），格式为“more 文件”。"></a>more命令用于查看纯文本文件（内容较多的），格式为“more 文件”。</h3><p>使用空格键或回车键向下翻页</p><pre class=" language-shell"><code class="language-shell">root@ubuntu:/# more /etc/passwdroot:x:0:0:root:/root:/bin/bashdaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologinbin:x:2:2:bin:/bin:/usr/sbin/nologinsys:x:3:3:sys:/dev:/usr/sbin/nologinsync:x:4:65534:sync:/bin:/bin/syncgames:x:5:60:games:/usr/games:/usr/sbin/nologinman:x:6:12:man:/var/cache/man:/usr/sbin/nologinlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologinmail:x:8:8:mail:/var/mail:/usr/sbin/nologinnews:x:9:9:news:/var/spool/news:/usr/sbin/nologinuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologinproxy:x:13:13:proxy:/bin:/usr/sbin/nologin--More--(29%)</code></pre><h3 id="head命令用于查看纯文本文档的前N行，格式为“head-选项-文件-”。"><a href="#head命令用于查看纯文本文档的前N行，格式为“head-选项-文件-”。" class="headerlink" title="head命令用于查看纯文本文档的前N行，格式为“head [选项] [文件]”。"></a>head命令用于查看纯文本文档的前N行，格式为“head [选项] [文件]”。</h3><p>选项的值：-n  行数   查看前多少行的内容</p><pre class=" language-shell"><code class="language-shell">root@ubuntu:/# head -n 3 /etc/passwdroot:x:0:0:root:/root:/bin/bashdaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologinbin:x:2:2:bin:/bin:/usr/sbin/nologin</code></pre><h3 id="tail命令用于查看纯文本文档的后N行或持续刷新内容，格式为“tail-选项-文件-”"><a href="#tail命令用于查看纯文本文档的后N行或持续刷新内容，格式为“tail-选项-文件-”" class="headerlink" title="tail命令用于查看纯文本文档的后N行或持续刷新内容，格式为“tail [选项] [文件]”"></a>tail命令用于查看纯文本文档的后N行或持续刷新内容，格式为“tail [选项] [文件]”</h3><p>tail命令最强悍的功能是可以持续刷新一个文件的内容，当想要实时查看最新日志文件时，这特别有用，此时的命令格式为“tail -f 文件名”</p><pre class=" language-shell"><code class="language-shell">root@ubuntu:/# tail -f /etc/passwd_apt:x:105:65534::/nonexistent:/usr/sbin/nologintss:x:106:111:TPM software stack,,,:/var/lib/tpm:/bin/falseuuidd:x:107:112::/run/uuidd:/usr/sbin/nologintcpdump:x:108:113::/nonexistent:/usr/sbin/nologinlandscape:x:109:115::/var/lib/landscape:/usr/sbin/nologinpollinate:x:110:1::/var/cache/pollinate:/bin/falsesshd:x:111:65534::/run/sshd:/usr/sbin/nologinsystemd-coredump:x:999:999:systemd Core Dumper:/:/usr/sbin/nologinshawn:x:1000:1000:shawn:/home/shawn:/bin/bashlxd:x:998:100::/var/snap/lxd/common/lxd:/bin/false</code></pre><p>tac：反向查看文件</p><pre class=" language-shell"><code class="language-shell">root@ubuntu:~/test# cat abc123456789root@ubuntu:~/test# tac abc789456123</code></pre><p>管道符：把前一个命令原本要输出到屏幕的标准正常数据当作是后一个命令的标准输入</p><pre class=" language-shell"><code class="language-shell">root@ubuntu:~/test# ifconfig | grep inet        inet 10.211.55.4  netmask 255.255.255.0  broadcast 10.211.55.255        inet6 fe80::21c:42ff:feb3:a11c  prefixlen 64  scopeid 0x20<link>        inet6 fdb2:2c26:f4e4:0:21c:42ff:feb3:a11c  prefixlen 64  scopeid 0x0<global>        inet 127.0.0.1  netmask 255.0.0.0        inet6 ::1  prefixlen 128  scopeid 0x10<host></code></pre><p>vi、vim</p><pre class=" language-shell"><code class="language-shell">#vi、vim#使用该命令创建文件，必须输入内容保存成功之后，该文件才会生效。root@ubuntu:~/test# vi 789.txtf</code></pre><p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210828091051280.png" alt="image-20210828091051280"></p><p>按下“i”进入插入状态</p><p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210828091436596.png" alt="image-20210828091436596"></p><p>按下“Esc”，按下“:”，输入“wq”后保存退出</p><p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210828092029329.png" alt="image-20210828092029329"></p><p>已创建新文件</p><p>除了按“:wq”退出之外</p><pre class=" language-shell"><code class="language-shell">/xxx：向前查找xxx字符？xxx：向后查找xxx字符:w：保存:w!：强制保存:q!：强制退出:wq!：强制保存退出/^xxx：查找xxx开头/xxx$：查找xxx结尾x：删除光标所在位置的字符dd：删除光标所在行ndd：删除当前行（包括此行）后 n 行文本dG：删除光标所在行一直到文件末尾的所有内容D：删除光标位置到行尾的内容yy    复制当前行，numyy 复制num行p、P：修改，删除，或者复制的内容作粘贴（p粘贴在当前行下面，P粘贴在当前行上面）</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux的初认识</title>
      <link href="/2021/08/27/Linux%E5%88%9D%E8%AE%A4%E8%AF%86/"/>
      <url>/2021/08/27/Linux%E5%88%9D%E8%AE%A4%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux发展史"><a href="#Linux发展史" class="headerlink" title="Linux发展史"></a>Linux发展史</h1><p>自行了解</p><h1 id="Linux介绍"><a href="#Linux介绍" class="headerlink" title="Linux介绍"></a>Linux介绍</h1><p>Linux优点</p><ul><li>开放</li><li>可靠</li><li>安全</li><li>稳定</li><li>多平台</li><li>多用户</li></ul><h1 id="Linux组成"><a href="#Linux组成" class="headerlink" title="Linux组成"></a>Linux组成</h1><ul><li>Linux内核<ul><li>内核是操作系统的核心，具有很多最基本功能，它负责管理系统的进程、内存、设备驱动程序、文件和网络系统，决定着系统的性能和稳定性。</li></ul></li><li>Shell<ul><li>Shell是系统的用户界面，提供了用户与内核进行交互操作的一种接口，它接收用户输入的命令并把它送入内核去执行，是一个命令解释器。</li></ul></li><li>文件系统<ul><li>是文件存放在磁盘等存储设备上的组织方法，linux是开放性的，能够支持多种异构的文件系统，如ext2,ext3,fat,vfat(fat32),ISO9660,nfs等。</li></ul></li><li>应用系统<ul><li>标准的linux系统都有一整套成为应用程序的程序集，包括文本编辑器、办公套件、数据库等</li></ul></li></ul><h1 id="Linux目录结构"><a href="#Linux目录结构" class="headerlink" title="Linux目录结构"></a>Linux目录结构</h1><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210827170023890.png" alt="image-20210827170023890" style="zoom:100%;" /><ul><li><p><strong>/bin</strong>：<br>bin 是 Binaries (二进制文件) 的缩写, 这个目录存放着最经常使用的<strong>命令</strong>。</p></li><li><p><strong>/boot：</strong><br>这里存放的是启动 Linux 时使用的一些<strong>核心文件</strong>，包括一些连接文件以及镜像文件。</p></li><li><p><strong>/dev ：</strong><br>dev 是 Device(设备) 的缩写, 该目录下存放的是 Linux 的<strong>外部设备</strong>，在 Linux 中访问设备的方式和访问文件的方式是相同的。</p></li><li><p><strong>/etc：</strong><br>etc 是 Etcetera(等等) 的缩写,这个目录用来存放所有的系统管理所需要的<strong>配置文件</strong>和子目录。</p></li><li><p><strong>/home</strong>：<br><strong>用户</strong>的主目录，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。</p></li><li><p><strong>/lib</strong>：<br>lib 是 Library(库) 的缩写这个目录里存放着系统最基本的<strong>动态连接共享库</strong>，其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要用到这些共享库。</p></li><li><p><strong>/media</strong>：<br>linux 系统<strong>自动识别的设备</strong>，例如U盘、光驱等等，当识别后，Linux 会把识别的设备挂载到这个目录下。</p></li><li><p><strong>/mnt</strong>：<br>系统提供该目录是为了让用户临时<strong>挂载</strong>别的文件系统的，我们可以将光驱挂载在 /mnt/ 上，然后进入该目录就可以查看光驱里的内容了。</p></li><li><p><strong>/opt</strong>：<br>opt 是 optional(可选) 的缩写，这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</p></li><li><p><strong>/proc</strong>：<br>proc 是 Processes(进程) 的缩写，/proc 是一种伪文件系统（也即虚拟文件系统），存储的是当前内核运行状态的一系列特殊文件，这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。<br>这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器：</p><pre><code>echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all</code></pre></li><li><p><strong>/root</strong>：<br>该目录为系统管理员，也称作超级权限者的用户主目录。</p></li><li><p><strong>/sbin</strong>：<br>s 就是 Super User 的意思，是 Superuser Binaries (超级用户的二进制文件) 的缩写，这里存放的是系统管理员使用的系统管理程序。</p></li><li><p><strong>/sys</strong>：</p><p>这是 Linux2.6 内核的一个很大的变化。该目录下安装了 2.6 内核中新出现的一个文件系统 sysfs 。</p><p>sysfs 文件系统集成了下面3种文件系统的信息：针对进程信息的 proc 文件系统、针对设备的 devfs 文件系统以及针对伪终端的 devpts 文件系统。</p><p>该文件系统是内核设备树的一个直观反映。</p><p>当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。</p></li><li><p><strong>/tmp</strong>：<br>tmp 是 temporary(临时) 的缩写这个目录是用来存放一些临时文件的。</p></li><li><p><strong>/usr</strong>：<br> usr 是 unix shared resources(共享资源) 的缩写，这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于 windows 下的 program files 目录。</p></li><li><p><strong>/var</strong>：<br>var 是 variable(变量) 的缩写，这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</p></li><li><p><strong>/run</strong>：<br>是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 /var/run 目录，应该让它指向 run。</p></li><li><p><del><strong>/selinux</strong>：</del><br><del>这个目录是 Redhat/CentOS 所特有的目录，Selinux 是一个安全机制，类似于 windows 的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。</del></p></li><li><p><del><strong>/srv</strong>：</del><br><del>该目录存放一些服务启动之后需要提取的数据。</del></p></li><li><p><del><strong>/lost+found</strong>：</del><br><del>这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</del></p></li></ul><h1 id="基本认识"><a href="#基本认识" class="headerlink" title="基本认识"></a>基本认识</h1><h2 id="shell认识"><a href="#shell认识" class="headerlink" title="shell认识"></a>shell认识</h2><pre class=" language-shell"><code class="language-shell">[root@localhost ~]#</code></pre><ul><li>root：当前用户</li><li>localhost：主机名</li><li>～：目录（～为家目录，/为根目录）</li><li>#：用户表示（#为超级用户，$为普通用户）</li></ul><h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p>命令名称 【选项】【参数】</p><p>如：ls -a /root    (查看/root目录下的文件)</p><p>注意：命令名称、选项、参数之间要用空格隔开，</p><h2 id="基本守则"><a href="#基本守则" class="headerlink" title="基本守则"></a>基本守则</h2><ul><li>Linux系统大小写敏感</li><li>文件名前面带”.”是隐藏文件</li><li>linux系统下的”/”相当于DOS下的”\”</li><li>配置文件#开头代表是注释行，程序不执行该行</li><li>“\”放在命令最后，说明下行的命令接在此行的后面</li><li>转译字符“\”，将特殊字符转换成普通字符（“\”也可以是单或双引号），如：空格、@、$等</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows server 2012 安装IIS</title>
      <link href="/2021/06/11/Windows%20server%202012%20R2%E5%AE%89%E8%A3%85IIS/"/>
      <url>/2021/06/11/Windows%20server%202012%20R2%E5%AE%89%E8%A3%85IIS/</url>
      
        <content type="html"><![CDATA[<p>Windows server 2012 安装IIS</p><p>选择服务器管理——添加角色和功能</p><p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210611130800043.png" alt="image-20210611130800043"></p><p>点击下一步</p><p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210611130832047.png" alt="image-20210611130832047"></p><p>下一步</p><p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210611130930720.png" alt="image-20210611130930720"></p><p>勾选“Web服务器（IIS）”和“应用程序服务”</p><p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210611131026012.png" alt="image-20210611131026012"></p><p>选择“3.5”、“4.5”、“IIS可承载web核心”</p><p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210611131241134.png" alt="image-20210611131241134"></p><p>下一步</p><p>![image-20210611131333225](/Users/tobyshawn/Library/Application Support/typora-user-images/image-20210611131333225.png)</p><p>勾选CGI</p><p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210611131812900.png" alt="image-20210611131812900"></p><p>下一步</p><p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210611131855563.png" alt="image-20210611131855563"></p><p>勾选如图所示</p><p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210611131940473.png" alt="image-20210611131940473"></p><p>点击安装</p><p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210611132037901.png" alt="image-20210611132037901"></p><p>等待安装完成</p><p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210611133105206.png" alt="image-20210611133105206"></p><p>访问服务器地址即可看到IIS的欢迎界面</p><p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210611133330123.png" alt="image-20210611133330123"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CS钓鱼邮件</title>
      <link href="/2021/06/08/CS%E9%92%93%E9%B1%BC%E9%82%AE%E4%BB%B6/"/>
      <url>/2021/06/08/CS%E9%92%93%E9%B1%BC%E9%82%AE%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="CS钓鱼邮件"><a href="#CS钓鱼邮件" class="headerlink" title="CS钓鱼邮件"></a>CS钓鱼邮件</h1><h2 id="添加监听器"><a href="#添加监听器" class="headerlink" title="添加监听器"></a>添加监听器</h2><p>首先在服务端开启cs服务，两个参数分别为服务端地址与密码</p><p>[root@tobyshawn cobaltstrike4.2-crack]# ./teamserver 120.xxx.xxx.xxx 123456</p><p>在客户端开启连接</p><p>tobyshawn @ MacBookPro-M1 in cobaltstrike4.2-crack $ ./cobaltstrike</p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608133051591.png" alt="image-20210608133051591" style="zoom:50%;" /><p>点击添加监听器</p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608133732356.png" alt="image-20210608133732356" style="zoom:50%;" /><p>输入相关信息即可，端口需要开放，可联通，未冲突（注意防火墙，安全组）</p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608133824486.png" alt="image-20210608133824486" style="zoom:50%;" /><h2 id="制作宏病毒"><a href="#制作宏病毒" class="headerlink" title="制作宏病毒"></a>制作宏病毒</h2><p>选择MS模块来制作一个宏病毒</p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608134101074.png" alt="image-20210608134101074" style="zoom:50%;" /><p>选择刚设置的监听器</p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608134126524.png" alt="image-20210608134126524" style="zoom:50%;" /><p>点击copy按钮复制相关代码</p><p>打开Word，在视图界面选择宏，并编辑宏</p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608134332998.png" alt="image-20210608134332998" style="zoom:50%;" /><p>在如图所示位置粘贴代码</p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608134432459.png" alt="image-20210608134432459" style="zoom:50%;" /><p>保存为启用宏的文档docm</p><h2 id="准备钓鱼邮件及网站"><a href="#准备钓鱼邮件及网站" class="headerlink" title="准备钓鱼邮件及网站"></a>准备钓鱼邮件及网站</h2><p>点开一封想要发送的邮件，将其导出为emi格式</p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608135925117.png" alt="image-20210608135925117" style="zoom:50%;" /><p>接下来为了真实性，克隆一个网站</p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608140511454.png" alt="image-20210608140511454" style="zoom:50%;" /><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608160723711.png" alt="image-20210608160723711" style="zoom:50%;" /><p>将钓鱼目标邮件地址记录到一个文件中</p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608140132996.png" alt="image-20210608140132996" style="zoom:50%;" /><p>开始发送钓鱼邮件</p><p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608140541011.png" alt="image-20210608140541011"></p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608140802309.png" alt="image-20210608140802309" style="zoom:50%;" /><p>设置好邮箱服务器</p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608140922215.png" alt="image-20210608140922215" style="zoom:50%;" /><p>该密码非邮箱密码，而是开启stmp服务时的代码</p><p>完成后点击发送邮件</p><p>在cs中会显示发送情况</p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608141026548.png" alt="image-20210608141026548" style="zoom:50%;" /><h2 id="上线"><a href="#上线" class="headerlink" title="上线"></a>上线</h2><p>等待目标打开邮件下载附件，邮件中的超链接已经被替换</p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608142129675.png" alt="image-20210608142129675" style="zoom:50%;" /><p>当目标打开附件时就会上线cs</p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608142242628.png" alt="image-20210608142242628" style="zoom:50%;" /><p>用户在假的页面上输入的信息也会 被记录下来，可以获取到用户输入的手机号，密码等信息</p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608142653000.png" alt="image-20210608142653000" style="zoom:50%;" /><p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608142638996.png" alt="image-20210608142638996"></p><p>也可以进行截图、上传文件等操作</p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608143026920.png" alt="image-20210608143026920" style="zoom:50%;" /><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608144251856.png" alt="image-20210608144251856" style="zoom:50%;" /><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210608144307692.png" alt="image-20210608144307692" style="zoom:50%;" />]]></content>
      
      
      
        <tags>
            
            <tag> 红队 </tag>
            
            <tag> cobalt strike </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker初学习</title>
      <link href="/2021/06/06/docker%E5%88%9D%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/06/06/docker%E5%88%9D%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇只是自己学习笔记，宿主机Ubuntu18.04和centos7混用，可能导致部分系统命令有出入，但是docker相关的命令无影响。docker info version logs等命令不再列出。目前为一些基础操作，可能后续还会增加，可能也会鸽了。有错误或者疑问欢迎提出讨论。</p><h1 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h1><h2 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h2><p><a href="https://cr.console.aliyun.com/">https://cr.console.aliyun.com/</a><br>首页点击“创建我的容器镜像” 得到一个专属的镜像加速地址</p><p>Docker中国区官方镜像<br><a href="https://registry.docker-cn.com/">https://registry.docker-cn.com</a></p><p>网易<br><a href="http://hub-mirror.c.163.com/">http://hub-mirror.c.163.com</a></p><pre class=" language-shell"><code class="language-shell">root@ubuntu:/home/shawn# vi /etc/docker/daemon.jsonroot@ubuntu:/home/shawn# cat /etc/docker/daemon.json &#123;        "registry-mirrors": ["https://o1260yxa.mirror.aliyuncs.com"]&#125;root@ubuntu:/home/shawn# service docker restartroot@ubuntu:/home/shawn# docker info... Labels: Experimental: false Insecure Registries:  127.0.0.0/8 Registry Mirrors:  https://o1260yxa.mirror.aliyuncs.com/ Live Restore Enabled: false ...</code></pre><h2 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h2><h3 id="1、docker-hub"><a href="#1、docker-hub" class="headerlink" title="1、docker  hub"></a>1、docker  hub</h3><p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210603104858557.png" alt="image-20210603104858557"></p><h3 id="2、docker-search"><a href="#2、docker-search" class="headerlink" title="2、docker search"></a>2、docker search</h3><p>使用docker search xxx[:tag]命令，也可以带tag搜索</p><pre class=" language-shell"><code class="language-shell">[root@localhost /]# docker search ubuntuNAME                                                      DESCRIPTION                                     STARS     OFFICIAL   AUTOMATEDubuntu                                                    Ubuntu is a Debian-based Linux operating sys…   12321     [OK]       dorowu/ubuntu-desktop-lxde-vnc                            Docker image to provide HTML5 VNC interface …   538                  [OK]websphere-liberty                                         WebSphere Liberty multi-architecture images …   273       [OK]       rastasheep/ubuntu-sshd                                    Dockerized SSH service, built on top of offi…   253                  [OK]consol/ubuntu-xfce-vnc                                    Ubuntu container with "headless" VNC session…   240                  [OK]ubuntu-upstart                                            Upstart is an event-based replacement for th…   110       [OK]       1and1internet/ubuntu-16-nginx-php-phpmyadmin-mysql-5      ubuntu-16-nginx-php-phpmyadmin-mysql-5          50                   [OK]open-liberty                                              Open Liberty multi-architecture images based…   46        [OK]       ubuntu-debootstrap                                        debootstrap --variant=minbase --components=m…   44        [OK]       i386/ubuntu                                               Ubuntu is a Debian-based Linux operating sys…   25                   solita/ubuntu-systemd                                     Ubuntu + systemd                                24                   [OK]1and1internet/ubuntu-16-apache-php-5.6                    ubuntu-16-apache-php-5.6                        14                   [OK]</code></pre><h2 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h2><p>docker pull xxx:tag</p><pre class=" language-shell"><code class="language-shell">[root@localhost /]# docker pull centos:77: Pulling from library/centos2d473b07cdd5: Pull complete Digest: sha256:0f4ec88e21daf75124b8a9e5ca03c37a5e937e0e108a255d890492430789b60eStatus: Downloaded newer image for centos:7docker.io/library/centos:7</code></pre><h2 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h2><p>docker images</p><pre class=" language-shell"><code class="language-shell">[root@localhost /]# docker imagesREPOSITORY                        TAG             IMAGE ID       CREATED          SIZEseacms                            v6.61           17720ee28ffb   39 minutes ago   739MBseacms                            demo            bbc3a9befb03   42 minutes ago   739MBseacms                            v6.1            294c32f9d5b1   18 hours ago     705MBdrupal_7.57                       cve-2018-7602   7b8d148f180b   25 hours ago     405MBdrupal_8.3.0                      cve-2017-6920   5c4fe0f07e90   26 hours ago     691MBwordpress4.7                      cve-2017-5487   f620e62f2ca8   26 hours ago     946MBtobyshawn/ubuntu16_04_lamp        v1              c231de98bb36   2 days ago       602MBvulfocus/seacms-cnvd_2020_22721   latest          f4dccf30c280   10 days ago      585MBubuntu                            16.04           9ff95a467e45   2 weeks ago      135MBsecfa/docker-awvs                 latest          cd2a9f00863a   3 weeks ago      1.06GBcentos                            7               8652b9f0cb4c   6 months ago     204MBdrupal                            7.57            79c9b34e01cf   3 years ago      403MBdrupal                            8.3.0           4e47ab49efee   4 years ago      445MB</code></pre><h2 id="导出镜像"><a href="#导出镜像" class="headerlink" title="导出镜像"></a>导出镜像</h2><pre class=" language-shell"><code class="language-shell">[root@localhost /]# docker save seacms:v6.61 > seacms_v6.61.tar[root@localhost /]# lsseacms_v6.61.tar  </code></pre><h2 id="导入镜像"><a href="#导入镜像" class="headerlink" title="导入镜像"></a>导入镜像</h2><p>docker load &lt; tar包</p><pre class=" language-shell"><code class="language-shell">[root@localhost /]# docker load < dircms_2011-sp3-utf8.tar239bf11460ef: Loading layer [==================================================>]  47.15MB/47.15MBLoaded image: dircms:2011-sp3-utf8[root@localhost /]# docker imagesREPOSITORY                        TAG             IMAGE ID       CREATED        SIZEdircms                            2011-sp3-utf8   8a9c43e51650   18 hours ago   785MB</code></pre><p>使用load导入的镜像不支持改名</p><p>（建议save导出的镜像用load导入，export导出的镜像用import导入，不要混用）</p><h1 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h1><h2 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h2><p>docker run -it 镜像名:tag [command]</p><p>-i：交互式操作</p><p>-t：终端</p><p>-d：后台运行，不进入终端</p><p>-p：指定端口映射，如8080:80的意思是将容器的80端口映射到宿主机上，访问宿主机的8080端口即可访问容器的80端口</p><p>[command]：/bin/bash、/bin/sh，看需求，在进入容器时执行的命令，也可以自己写上指定脚本用于运行</p><pre class=" language-shell"><code class="language-shell">[root@localhost /]# docker run -it -p 8080:80 centos:7[root@87369de718c8 /]# lsanaconda-post.log  bin  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var[root@87369de718c8 /]# pwd/[root@87369de718c8 /]# whoami;idrootuid=0(root) gid=0(root)</code></pre><h2 id="启动、停止、重启容器"><a href="#启动、停止、重启容器" class="headerlink" title="启动、停止、重启容器"></a>启动、停止、重启容器</h2><p>启动已有容器的命令为docker start 容器id</p><pre class=" language-shell"><code class="language-shell">[root@localhost /]# docker start 625dcd1bf772625dcd1bf772</code></pre><h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h2><p>对于后台运行的容器（-d参数创建的容器，或是start已存在的容器），需要进入容器时有两种方法</p><h3 id="1、docker-attach"><a href="#1、docker-attach" class="headerlink" title="1、docker attach"></a>1、docker attach</h3><p>docker attach 容器id   #exit时会停止容器（进⼊⼀个容器正在执⾏的终端）</p><h3 id="2、docker-exec"><a href="#2、docker-exec" class="headerlink" title="2、docker exec"></a>2、docker exec</h3><p>docker exec -it 容器id /bin/bash  #exit时不会停止容器（进⼊容器新开⼀个终端）</p><pre class=" language-shell"><code class="language-shell">[root@localhost /]# docker exec -it 625dcd1bf772 /bin/bashroot@625dcd1bf772:/# </code></pre><h2 id="容器保存成镜像"><a href="#容器保存成镜像" class="headerlink" title="容器保存成镜像"></a>容器保存成镜像</h2><p>docker commit 容器ID 镜像名</p><pre class=" language-shell"><code class="language-shell">[root@localhost /]# docker commit 28a8e3c0c9dd dircms_demosha256:47249d0234ee9b962ff1121589bf5365746b614f51c72f33e78f3a51c48ca704[root@localhost /]# docker imagesREPOSITORY                        TAG             IMAGE ID       CREATED         SIZEdircms_demo                       latest          47249d0234ee   7 seconds ago   783MB</code></pre><h2 id="容器导出为镜像"><a href="#容器导出为镜像" class="headerlink" title="容器导出为镜像"></a>容器导出为镜像</h2><p>docker export 容器id &gt; name.tar</p><pre class=" language-shell"><code class="language-shell">[root@localhost /]# docker export 625dcd1bf772 > name.tar[root@localhost /]# ll总用量 2994444-rw-r--r--.   1 root root 613240832 6月   4 14:50 name.tar</code></pre><h2 id="容器快照文件导入为镜像"><a href="#容器快照文件导入为镜像" class="headerlink" title="容器快照文件导入为镜像"></a>容器快照文件导入为镜像</h2><p>docker import 容器文件 镜像名</p><pre class=" language-shell"><code class="language-shell">[root@localhost /]# docker import name.tar name:testsha256:8feb4db4855da4aa9de16cbd57088d4946b8a2844a91737444ae3fe5ab1990c3[root@localhost /]# docker imagesREPOSITORY                   TAG             IMAGE ID       CREATED             SIZEname                         test            8feb4db4855d   6 seconds ago       602MB</code></pre><p>使用import导入的镜像可以指定镜像名与tag</p><p>（建议save导出的镜像用load导入，export导出的镜像用import导入，不要混用）</p><h2 id="容器改名"><a href="#容器改名" class="headerlink" title="容器改名"></a>容器改名</h2><p>docker rename old_name new_name</p><pre class=" language-shell"><code class="language-shell">[root@localhost /]# docker ps -aCONTAINER ID   IMAGE                           COMMAND                  CREATED             STATUS                         PORTS     NAMES87369de718c8   centos:7                        "/bin/bash"              22 minutes ago      Exited (127) 6 seconds ago               dazzling_ritchie[root@localhost /]# docker rename dazzling_ritchie rubbish[root@localhost /]# docker ps -aCONTAINER ID   IMAGE                           COMMAND                  CREATED             STATUS                         PORTS     NAMES87369de718c8   centos:7                        "/bin/bash"              23 minutes ago      Exited (127) 55 seconds ago              rubbis</code></pre><p><img src="https://ts-bucker.oss-cn-hangzhou.aliyuncs.com/uPic/image-20210603113831463.png" alt="image-20210603113831463"></p><h2 id="容器与宿主机文件拷贝"><a href="#容器与宿主机文件拷贝" class="headerlink" title="容器与宿主机文件拷贝"></a>容器与宿主机文件拷贝</h2><p>docker cp 文件 容器名：容器内路径</p><pre class=" language-shell"><code class="language-shell">[root@localhost /]# docker cp dircms_sp3_gbk.zip vigilant_mayer:/var/www/html</code></pre><pre class=" language-shell"><code class="language-shell">root@43dd7ab25a68:/var/www/html# lsroot@43dd7ab25a68:/var/www/html# lsdircms_sp3_gbk.zip</code></pre><h2 id="容器内服务自启"><a href="#容器内服务自启" class="headerlink" title="容器内服务自启"></a>容器内服务自启</h2><p>制作完docker镜像后发现，每次新建容器或者重启容器，服务都不会自动起来，比如我搭建的cms，而apache2服务和mysql每次都是关闭的状态，还需要重新去开启，就很麻烦，因此希望容器内的服务能够随着容器的启动而启动。</p><h3 id="目前情况"><a href="#目前情况" class="headerlink" title="目前情况"></a>目前情况</h3><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost test<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker start f1909ca90a08 </span>f1909ca90a08<span class="token punctuation">[</span>root@localhost test<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker exec -it f1909ca90a08 /bin/bash</span>root@f1909ca90a08:/<span class="token comment" spellcheck="true"># service apache2 status </span> * apache2 is not runningroot@f1909ca90a08:/<span class="token comment" spellcheck="true"># service mysql status </span> * MySQL is stopped.</code></pre><h3 id="操作过程"><a href="#操作过程" class="headerlink" title="操作过程"></a>操作过程</h3><p>在docker容器内写入sh，并赋予执行权限</p><p>命令根据自己的要求更改，最后留着/bin/bash是为了保留终端</p><p>(如果是打包集成环境，不需要终端操作而只是开启后后台运行的话，建议将/bin/bash 改成 tail -f /dev/null，因为)</p><pre class=" language-shell"><code class="language-shell">root@f1909ca90a08:/# vi /etc/apache2/auto_start.shroot@f1909ca90a08:/# cat /etc/apache2/auto_start.sh service apache2 start service mysql start/bin/bashroot@f1909ca90a08:/# chmod 777 /etc/apache2/auto_start.sh</code></pre><p>退出容器，并关闭，保存为镜像</p><pre class=" language-shell"><code class="language-shell">root@f1909ca90a08:/# exitexit[root@localhost test]# docker ps CONTAINER ID   IMAGE         COMMAND       CREATED             STATUS         PORTS                                             NAMESf1909ca90a08   seacms:v6.1   "/bin/bash"   About an hour ago   Up 5 minutes   3306/tcp, 0.0.0.0:8080->80/tcp, :::8080->80/tcp   mystifying_bose[root@localhost test]# docker stop f1909ca90a08f1909ca90a08[root@localhost test]# docker commit f1909ca90a08 seacms:demosha256:bbc3a9befb0323272f2889d6ce9d4cf3a1c20270f3fb765325252ae6fbcc8a88[root@localhost test]# </code></pre><p>在一个*<u><strong>空目录</strong></u>*下，创建Dockerfile</p><p>FROM 指定基础镜像</p><pre class=" language-shell"><code class="language-shell">[root@localhost test]# ls[root@localhost test]# vi Dockerfile[root@localhost test]# cat Dockerfile From seacms:demoCMD ["/bin/sh","/etc/apache2/auto_start.sh"][root@localhost test]# </code></pre><p>通过Dockerfile构建新的镜像</p><p>-t指定最终镜像名，需要跟地址，这里使用的是 “**.**” ，也就是当前目录</p><pre class=" language-shell"><code class="language-shell">[root@localhost test]# docker build -t seacms:v6.61 .Sending build context to Docker daemon  2.048kBStep 1/2 : From seacms:demo ---> bbc3a9befb03Step 2/2 : CMD ["/bin/sh","/etc/apache2/auto_start.sh"] ---> Running in ec97dd1c1b8dRemoving intermediate container ec97dd1c1b8d ---> 17720ee28ffbSuccessfully built 17720ee28ffbSuccessfully tagged seacms:v6.61[root@localhost test]# </code></pre><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>用新的镜像创建容器</p><pre class=" language-shell"><code class="language-shell">[root@localhost test]# docker imagesREPOSITORY                        TAG             IMAGE ID       CREATED              SIZEseacms                            v6.61           17720ee28ffb   About a minute ago   739MBseacms                            demo            bbc3a9befb03   4 minutes ago        739MBseacms                            v6.1            294c32f9d5b1   17 hours ago         705MB[root@localhost test]# docker run -it -p 8080:80 seacms:v6.61 * Starting web server apache2                                                                                                                                                               AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 172.17.0.2. Set the 'ServerName' directive globally to suppress this message *  * Starting MySQL database server mysqld                                                                                                                                              [ OK ]  * Checking for tables which need an upgrade, are corrupt or were not closed cleanly.root@87da08c8d005:/# service apache2 status * apache2 is runningroot@87da08c8d005:/# service mysql status * /usr/bin/mysqladmin  Ver 8.42 Distrib 5.5.60, for debian-linux-gnu on x86_64Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Server version        5.5.60-0ubuntu0.14.04.1Protocol version    10Connection        Localhost via UNIX socketUNIX socket        /var/run/mysqld/mysqld.sockUptime:            17 secThreads: 1  Questions: 212  Slow queries: 0  Opens: 82  Flush tables: 1  Open tables: 75  Queries per second avg: 12.470root@87da08c8d005:/#</code></pre><p>此时服务已经随着容器的启动而启动了</p>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
